REVISION: 1
RELEASED: Wed May 20 17:58:01 2020
CHART: mojaloop-8.8.0
USER-SUPPLIED VALUES:
account-lookup-service:
  account-lookup-service:
    affinity: {}
    config:
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      db_acquire_timeout_millis: 30000
      db_connection_pool_max: 30
      db_connection_pool_min: 10
      db_create_retry_interval_millis: 200
      db_create_timeout_millis: 30000
      db_database: account_lookup
      db_debug: false
      db_destroy_timeout_millis: 5000
      db_driver: mysql
      db_host: $release_name-account-lookup-mysql
      db_idle_timeout_millis: 30000
      db_password: OdonPianoX
      db_port: 3306
      db_reap_interval_millis: 1000
      db_type: mysql
      db_user: account_lookup
      display_routes: true
      end_point_cache:
        expiresIn: 180000
        generateTimeout: 30000
      log_level: info
      run_migrations: false
    containers:
      admin:
        image:
          command: '["node", "src/index.js", "server", "--admin"]'
          pullPolicy: Always
          repository: mojaloop/account-lookup-service
        service:
          ports:
            api:
              name: http-admin
              port: 4001
      api:
        image:
          command: '["node", "src/index.js", "server", "--api"]'
          pullPolicy: Always
          repository: mojaloop/account-lookup-service
        service:
          ports:
            api:
              name: http-api
              port: 4002
    enabled: true
    fullnameOverride: ""
    ingress:
      annotations: {}
      enabled: true
      hosts:
      - perf1-account-lookup.mojaloop.live
      path: /
      tls: []
    init:
      enabled: true
      mysql:
        command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
          'select * from oracleEndpoint;' ; do echo waiting for MySQL; sleep 2; done;
        enabled: true
        name: wait-for-mysql
        pullPolicy: Always
        repository: mysql
        tag: latest
    metrics:
      config:
        defaultLabels:
          serviceName: account-lookup-service
        prefix: moja_
        timeout: 5000
      enabled: true
    nameOverride: ""
    nodeSelector: {}
    replicaCount: 0
    resources: {}
    service:
      port: 80
      type: ClusterIP
    tolerations: []
  account-lookup-service-admin:
    affinity: {}
    config:
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      db_acquire_timeout_millis: 30000
      db_connection_pool_max: 30
      db_connection_pool_min: 10
      db_create_retry_interval_millis: 200
      db_create_timeout_millis: 30000
      db_database: account_lookup
      db_debug: false
      db_destroy_timeout_millis: 5000
      db_driver: mysql
      db_host: $release_name-account-lookup-mysql
      db_idle_timeout_millis: 30000
      db_password: OdonPianoX
      db_port: 3306
      db_reap_interval_millis: 1000
      db_type: mysql
      db_user: account_lookup
      display_routes: true
      end_point_cache:
        expiresIn: 180000
        generateTimeout: 30000
      log_level: info
      run_migrations: true
    containers:
      admin:
        image:
          command: '["node", "src/index.js", "server", "--admin"]'
          pullPolicy: Always
          repository: mojaloop/account-lookup-service
        service:
          ports:
            api:
              name: http-admin
              port: 4001
      api:
        image:
          command: '["node", "src/index.js", "server", "--api"]'
          pullPolicy: Always
          repository: mojaloop/account-lookup-service
        service:
          ports:
            api:
              name: http-api
              port: 4002
    enabled: true
    fullnameOverride: ""
    ingress:
      annotations: {}
      enabled: true
      hosts:
      - perf1-account-lookup-admin.mojaloop.live
      path: /
      tls: []
    init:
      enabled: true
      mysql:
        command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
          'select version()' ; do echo waiting for MySQL; sleep 2; done;
        name: wait-for-mysql
        pullPolicy: Always
        repository: mysql
        tag: latest
    metrics:
      config:
        defaultLabels:
          serviceName: account-lookup-service-admin
        prefix: moja_
        timeout: 5000
      enabled: true
    nameOverride: ""
    nodeSelector: {}
    replicaCount: 0
    resources: {}
    service:
      port: 80
      type: ClusterIP
    tolerations: []
  mysql:
    allowRootFrom: '%'
    configFiles:
      node.cnf: |
        [mysqld]
        datadir=/var/lib/mysql
        default_storage_engine=InnoDB
        binlog_format=ROW
        innodb_flush_log_at_trx_commit  = 0
        innodb_flush_method             = O_DIRECT
        innodb_file_per_table           = 1
        innodb_autoinc_lock_mode=2
        bind_address = 0.0.0.0
        wsrep_slave_threads=2
        wsrep_cluster_address=gcomm://
        wsrep_provider=/usr/lib/galera3/libgalera_smm.so
        wsrep_cluster_name=galera
        wsrep_sst_method=xtrabackup-v2
        pxc_strict_mode=DISABLED
        max_connections=999
        max_user_connections=994
        thread_cache_size=999
    enabled: true
    image:
      pullPolicy: Always
      repository: percona/percona-xtradb-cluster
    logTail: true
    metricsExporter:
      enabled: true
    mysqlDatabase: account_lookup
    mysqlPassword: OdonPianoX
    mysqlUser: account_lookup
    nameOverride: account-lookup-mysql
    nodeSelector:
      node-role.mojaloop.io: data
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      size: 8Gi
    podAnnotations: {}
    replicas: 0
    service:
      externalIPs: []
      port: 3306
      type: ClusterIP
    tolerations:
    - effect: NoSchedule
      key: node-role.mojaloop.io
      operator: Equal
      value: data
central:
  centraleventprocessor:
    config:
      PORT: 3080
      central_ledger_admin_host: $release_name-centralledger-service
      central_ledger_admin_port: 3001
      central_ledger_api_host: centralledger-service
      central_ledger_api_port: 3000
      hub_participant:
        name: hub
      kafka_host: $release_name-kafka
      kafka_port: 9092
      mongo_database: mojaloop
      mongo_host: $release_name-cep-obj
      mongo_password: password
      mongo_port: 27017
      mongo_user: mojaloop
    ingress:
      annotations: null
      enabled: true
      externalPath: /
      hosts:
        api: central-event-processor.local
      tls: null
    init:
      enabled: true
      kafka:
        command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
          do echo waiting for Kafka; sleep 2; done;
        env: {}
        name: wait-for-kafka
        pullPolicy: Always
        repository: solsson/kafka
        tag: latest
      mongodb:
        command: mongo mongodb://$mongo_host:$mongo_port --eval "db.adminCommand('ping')"
        name: wait-for-mongodb
        pullPolicy: Always
        repository: bitnami/mongodb
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 30
      periodSeconds: 15
    mongodb:
      additionalLabels: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - data
      clusterDomain: cluster.local
      configmap: null
      enabled: false
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/mongodb
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      metrics:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: forekshub/percona-mongodb-exporter
          tag: latest
        podAnnotations:
          prometheus.io/port: "9216"
          prometheus.io/scrape: "true"
        serviceMonitor:
          additionalLabels: {}
          alerting:
            rules: {}
          enabled: false
      mongodbDatabase: mojaloop
      mongodbEnableIPv6: true
      mongodbExtraFlags: []
      mongodbPassword: password
      mongodbRootPassword: adminpass
      mongodbUsername: mojaloop
      nameOverride: cep-obj
      nodeSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: false
        size: 8Gi
      podAnnotations: {}
      podLabels: {}
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 0
      replicaSet:
        enabled: false
        name: rs0
        pdb:
          minAvailable:
            arbiter: 1
            primary: 1
            secondary: 1
        replicas:
          arbiter: 1
          secondary: 1
        useHostnames: true
      resources: {}
      securityContext:
        enabled: true
        fsGroup: 1001
        runAsUser: 1001
      service:
        annotations: {}
        port: 27017
        type: ClusterIP
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: data
      usePassword: true
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 30
      periodSeconds: 15
    replicaCount: 0
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3080
            name: central-event-processor
      externalPort: 80
      internalPort: 3080
      name: central-event-processor
      type: ClusterIP
  centralledger:
    centralledger-handler-admin-transfer:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        event_log_filter: ""
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_partitioner: random
        kafka_port: 9092
        log_level: error
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--admin"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v9.5.1-snapshot
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-admin-transfer.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        enabled: false
        image:
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
    centralledger-handler-timeout:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        event_log_filter: ""
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_partitioner: random
        kafka_port: 9092
        log_level: error
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--timeout"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v9.5.1-snapshot
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-timeout.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        enabled: false
        image:
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
    centralledger-handler-transfer-fulfil:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_fulfil
      config:
        cache_enabled: true
        cache_expires_in_ms: 60000
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        duplicate_fulfil_mode: INSERT_ONLY
        event_log_filter: audit:*
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_async_chained_mode: true
        kafka_autocommit_interval_ms: 100
        kafka_batch_count: 100
        kafka_batch_timeout: 50
        kafka_concurrency: 1
        kafka_host: $release_name-kafka
        kafka_mode: 0
        kafka_partitioner: random
        kafka_port: 9092
        kafka_sync: true
        log_level: info
        raw_fulfilposition_enabled: true
        uv_threadpool_size: 12
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--fulfilPosition"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger-perf
            tag: v10.2.8-perf1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-fulfil.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      nodeSelector: {}
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        enabled: false
        image:
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: ml_cl_fulfil
    centralledger-handler-transfer-get:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        event_log_filter: ""
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_partitioner: random
        kafka_port: 9092
        log_level: error
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--get"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v9.5.1-snapshot
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-get.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        enabled: false
        image:
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
    centralledger-handler-transfer-position:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_position
      config:
        cache_enabled: true
        cache_expires_in_ms: 60000
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        event_log_filter: audit:*
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_async_chained_mode: true
        kafka_autocommit_interval_ms: 100
        kafka_batch_count: 100
        kafka_batch_timeout: 50
        kafka_concurrency: 1
        kafka_host: $release_name-kafka
        kafka_mode: 0
        kafka_partitioner: random
        kafka_port: 9092
        kafka_sync: true
        log_level: info
        uv_threadpool_size: 12
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--position"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger-perf
            tag: v10.2.8-perf1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 30
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 30
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-position.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      nodeSelector: {}
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        enabled: false
        image:
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: ml_cl_position
    centralledger-handler-transfer-prepare:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_prepare
      config:
        cache_enabled: true
        cache_expires_in_ms: 60000
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        duplicate_prepare_mode: INSERT_ONLY
        event_log_filter: audit:*
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_async_chained_mode: true
        kafka_autocommit_interval_ms: 100
        kafka_batch_count: 100
        kafka_batch_timeout: 50
        kafka_concurrency: 1
        kafka_host: $release_name-kafka
        kafka_mode: 0
        kafka_partitioner: random
        kafka_port: 9092
        kafka_sync: true
        log_level: info
        uv_threadpool_size: 12
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--preparePosition"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger-perf
            tag: v10.2.8-perf1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-prepare.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      nodeSelector: {}
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        enabled: false
        image:
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: ml_cl_prepare
    centralledger-service:
      config:
        cache_enabled: false
        cache_expires_in_ms: 60000
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        event_log_filter: audit:*
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_async_chained_mode: true
        kafka_batch_count: 100
        kafka_batch_timeout: 50
        kafka_concurrency: 1
        kafka_host: $release_name-kafka
        kafka_mode: 0
        kafka_partitioner: random
        kafka_port: 9092
        kafka_sync: true
        log_level: info
        uv_threadpool_size: 12
      containers:
        api:
          image:
            command: '["node", "src/api/index.js"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger-perf
            tag: v10.2.8-perf1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: perf1-central-ledger.mojaloop.live
        tls: null
        type: http
      init:
        enabled: true
        migration:
          command: npm run migrate
          config:
            run_data_migration: true
          enabled: true
          name: run-migration
        mysql:
          command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
            'select version()' ; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        enabled: false
        image:
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
    enabled: true
    forensicloggingsidecar:
      centralkms:
        enabled: true
        image:
          pullPolicy: Always
          repository: mojaloop/central-kms
          tag: v2.4
        ingress:
          annotations: null
          enabled: true
          externalPath: /
          hosts:
          - central-kms.local
          tls: null
        livenessProbe:
          enabled: true
          httpGet:
            path: /sidecars
          initialDelaySeconds: 30
          periodSeconds: 5
        nameOverride: centralkms
        postgresql:
          enabled: true
          nameOverride: centralkms-postgresql
          postgresPassword: xD873IyaQB
          postgresUser: kms
          service:
            externalIPs: []
            port: 5432
            type: ClusterIP
        readinessProbe:
          enabled: true
          httpGet:
            path: /sidecars
          initialDelaySeconds: 30
          periodSeconds: 5
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 8080
                name: http-api-and-tcp-websocket
          externalPort: 8080
          internalPort: 8080
          name: http-api-and-tcp-websocket
          type: ClusterIP
      config: {}
      enabled: false
      image:
        pullPolicy: Always
        repository: mojaloop/forensic-logging-sidecar
        tag: v2.4
      ingress:
        annotations: null
        enabled: false
        externalPath: /
        hosts:
          api: forensic-logging-sidecar.local
        tls: null
      livenessProbe:
        enabled: true
        initialDelaySeconds: 90
        periodSeconds: 15
      nameOverride: forensicloggingsidecar-ledger
      postgresql:
        enabled: true
        nameOverride: forensicloggingsidecar-ledger-postgresql
        postgresPassword: Wqt0KlkKvL
        postgresUser: sidecar
        service:
          externalIPs: []
          port: 5432
          type: ClusterIP
      readinessProbe:
        enabled: true
        initialDelaySeconds: 90
        periodSeconds: 15
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 5678
              name: http-api-and-ws
        externalPort: 5678
        internalPort: 5678
        name: http-api-and-ws
        type: ClusterIP
    kafka:
      additionalPorts: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - broker
      configurationOverrides:
        default.replication.factor: 1
        offsets.topic.replication.factor: 1
      enabled: true
      envOverrides:
        kafka.log4j.loggers: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
        kafka.log4j.root.loglevel: INFO
      external:
        domain: cluster.local
        enabled: false
        firstListenerPort: 31090
        init:
          image: lwolf/kubectl_deployer
          imagePullPolicy: IfNotPresent
        servicePort: 19092
      image: confluentinc/cp-kafka
      imagePullPolicy: IfNotPresent
      jmx:
        configMap:
          enabled: true
          overrideConfig: {}
          overrideName: ""
        port: 5555
        whitelistObjectNames:
        - kafka.controller:*
        - kafka.server:*
        - java.lang:*
        - kafka.network:*
        - kafka.log:*
      kafkaHeapOptions: -Xmx1G -Xms1G
      logSubPath: logs
      nameOverride: kafka
      nodeSelector: {}
      persistence:
        enabled: false
        mountPath: /opt/kafka/data
        size: 1Gi
      podManagementPolicy: OrderedReady
      prometheus:
        jmx:
          enabled: true
          image: solsson/kafka-prometheus-jmx-exporter@sha256
          imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
          interval: 10s
          port: 5556
          resources: {}
        kafka:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: node-role.mojaloop.io
                    operator: In
                    values:
                    - broker
          enabled: true
          image: danielqsj/kafka-exporter
          interval: 10s
          port: 9308
          resources: {}
          tolerations:
          - effect: NoSchedule
            key: node-role.mojaloop.io
            operator: Equal
            value: broker
        operator:
          enabled: false
          serviceMonitor:
            namespace: monitoring
            selector:
              prometheus: kube-prometheus
      rbac:
        enabled: true
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicas: 5
      resources: {}
      terminationGracePeriodSeconds: 60
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: broker
      updateStrategy:
        type: OnDelete
      zookeeper:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.mojaloop.io
                  operator: In
                  values:
                  - broker
        enabled: true
        heap: 1G
        imagePullPolicy: IfNotPresent
        persistence:
          enabled: false
        port: 2181
        replicaCount: 3
        resources: null
        tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: broker
        url: ""
    mysql:
      allowRootFrom: '%'
      configFiles:
        node.cnf: |
          [mysqld]
          datadir=/var/lib/mysql
          default_storage_engine=InnoDB
          binlog_format=ROW
          innodb_flush_log_at_trx_commit  = 0
          innodb_flush_method             = O_DIRECT_NO_FSYNC
          innodb_file_per_table           = 1
          innodb_buffer_pool_size=50G
          innodb_log_file_size=4G
          max_connections=1000
          innodb_autoinc_lock_mode=2
          bind_address = 0.0.0.0
          wsrep_log_conflicts = 1
          wsrep_retry_autocommit=4
          wsrep_slave_threads=2
          wsrep_cluster_address=gcomm://
          wsrep_provider=/usr/lib/galera3/libgalera_smm.so
          wsrep_cluster_name=galera
          wsrep_sst_method=xtrabackup-v2
          pxc_strict_mode=DISABLED
      enabled: true
      image:
        pullPolicy: Always
        repository: percona/percona-xtradb-cluster
      logTail: true
      metricsExporter:
        enabled: true
      mysqlDatabase: central_ledger
      mysqlPassword: oyMxgZChuu
      mysqlUser: central_ledger
      nameOverride: centralledger-mysql
      nodeSelector:
        node-role.mojaloop.io: data
      persistence:
        accessMode: ReadWriteOnce
        enabled: false
        size: 8Gi
      podAnnotations: {}
      replicas: 1
      service:
        externalIPs: []
        port: 3306
        type: ClusterIP
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: data
    nameOverride: centralledger
  centralsettlement:
    config:
      db_acquire_timeout_millis: 30000
      db_connection_pool_max: 30
      db_connection_pool_min: 10
      db_create_retry_interval_millis: 200
      db_create_timeout_millis: 30000
      db_database: central_ledger
      db_debug: false
      db_destroy_timeout_millis: 5000
      db_driver: mysql
      db_host: $release_name-centralledger-mysql
      db_idle_timeout_millis: 30000
      db_password: oyMxgZChuu
      db_port: 3306
      db_reap_interval_millis: 1000
      db_type: mysql
      db_user: central_ledger
      hub_participant:
        id: 1
        name: hub
      kafka_host: $release_name-kafka
      kafka_port: 9092
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: perf1-central-settlement.mojaloop.live
      tls: null
    init:
      enabled: true
      mysql:
        command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
          -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
          && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
          fi; do echo waiting for MySQL; sleep 2; done;
        name: wait-for-mysql
        pullPolicy: Always
        repository: mysql
        tag: latest
    livenessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    readinessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    replicaCount: 0
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3007
            name: http-api
      ports:
        api:
          externalPort: 80
          internalPort: 3007
          name: http-api
      type: ClusterIP
centraleventprocessor:
  enabled: false
emailnotifier:
  config:
    PORT: 3081
    email:
      ciphers: SSLv3
      host: smtp-relay.sendinblue.com
      pass: znHXxEyQBrJd0c37
      port: 587
      user: valentin.genev@modusbox.com
    hub_participant:
      name: hub
    kafka_host: $release_name-kafka
    kafka_port: 9092
  enabled: true
  ingress:
    annotations: null
    enabled: true
    externalPath: /
    hosts:
      api: email-notifier.local
    tls: null
  init:
    enabled: true
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 30
    periodSeconds: 15
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 30
    periodSeconds: 15
  replicaCount: 0
  resources: {}
  service:
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        api:
          externalPort: 3081
          name: email-notifier
    externalPort: 80
    internalPort: 3081
    name: email-notifier
    type: ClusterIP
global: {}
ml-api-adapter:
  ml-api-adapter-handler-notification:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.mojaloop.io
              operator: In
              values:
              - ml_notify
    config:
      central_services_health_endpoint_param: /health?simple
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      endpoint_cache_expiresInMs: 4000000
      endpoint_cache_generateTimeoutMs: 30000
      event_log_filter: ""
      http_config:
        httpAgent:
          keepAlive: true
          keepAliveMsecs: 1000
          maxFreeSockets: 20
          maxSockets: 20
      kafka_async_chained_mode: true
      kafka_autocommit_interval_ms: 100
      kafka_batch_count: 100
      kafka_batch_timeout: 50
      kafka_concurrency: 1
      kafka_host: $release_name-kafka
      kafka_mode: 0
      kafka_partitioner: random
      kafka_port: 9092
      kafka_sync: null
      log_level: info
      max_callback_time_lag_dilation_milliseconds: 200
      max_fulfil_timeout_duration_seconds: 240
      security:
        callback:
          rejectUnauthorized: true
      send_transfer_confirmation_to_payee: false
      uv_threadpool_size: 12
    enabled: true
    image:
      repository: mojaloop/ml-api-adapter-perf
      tag: v10.2.7-perf1
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: ml-api-adapter.local
      tls: null
    init:
      enabled: true
    livenessProbe:
      enabled: true
      httpGet:
        path: /health?simple
      initialDelaySeconds: 90
      periodSeconds: 15
    metrics:
      enabled: true
    nodeSelector: {}
    readinessProbe:
      enabled: true
      httpGet:
        path: /health?simple
      initialDelaySeconds: 120
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      externalPort: 80
      internalPort: 3000
      type: ClusterIP
    sidecar:
      config:
        log_level: info
      enabled: false
      image:
        pullPolicy: Always
        repository: mojaloop/event-sidecar
        tag: v8.8.0-snapshot.3
      livenessProbe:
        enabled: true
        initialDelaySeconds: 90
        periodSeconds: 15
      readinessProbe:
        enabled: true
        initialDelaySeconds: 120
        periodSeconds: 15
    tolerations:
    - effect: NoSchedule
      key: node-role.mojaloop.io
      operator: Equal
      value: ml_notify
  ml-api-adapter-service:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.mojaloop.io
              operator: In
              values:
              - ml_api
    central_services_health_endpoint_param: /health?simple
    config:
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      event_log_filter: audit:*
      kafka_async_chained_mode: true
      kafka_batch_count: 100
      kafka_batch_timeout: 50
      kafka_concurrency: 1
      kafka_host: $release_name-kafka
      kafka_mode: 0
      kafka_partitioner: random
      kafka_port: 9092
      kafka_sync: true
      log_level: info
      max_callback_time_lag_dilation_milliseconds: 200
      max_fulfil_timeout_duration_seconds: 240
      security:
        callback:
          rejectUnauthorized: true
      uv_threadpool_size: 12
    enabled: true
    image:
      repository: mojaloop/ml-api-adapter-perf
      tag: v10.2.7-perf1
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: perf1-ml-api-adapter.mojaloop.live
      tls: null
    init:
      enabled: true
      image:
        command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
          do echo waiting for Kafka; sleep 2; done;
        env: {}
        name: wait-for-kafka
        pullPolicy: Always
        repository: solsson/kafka
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /health?simple
      initialDelaySeconds: 90
      periodSeconds: 15
    metrics:
      enabled: true
    nodeSelector: {}
    readinessProbe:
      enabled: true
      httpGet:
        path: /health?simple
      initialDelaySeconds: 120
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      externalPort: 80
      internalPort: 3000
      type: ClusterIP
    sidecar:
      config:
        log_level: info
      enabled: false
      image:
        pullPolicy: Always
        repository: mojaloop/event-sidecar
        tag: v8.8.0-snapshot.3
      livenessProbe:
        enabled: true
        initialDelaySeconds: 90
        periodSeconds: 15
      readinessProbe:
        enabled: true
        initialDelaySeconds: 120
        periodSeconds: 15
    tolerations:
    - effect: NoSchedule
      key: node-role.mojaloop.io
      operator: Equal
      value: ml_api
mojaloop-bulk:
  bulk-api-adapter:
    bulk-api-adapter-handler-notification:
      config:
        central_services_host: $release_name-centralledger-service
        central_services_port: 80
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
        security:
          callback:
            rejectUnauthorized: true
      enabled: true
      image:
        command: '["node", "src/handlers/index.js", "handler", "--notification"]'
        pullPolicy: Always
        repository: mojaloop/bulk-api-adapter
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: false
        externalPath: /
        hosts:
          api: bulk-api-adapter-notification.local
        tls: null
      init:
        enabled: true
        image:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      metrics:
        config:
          defaultLabels:
            serviceName: bulk-handler-notification
          prefix: moja_
          timeout: 5000
        enabled: true
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        externalPort: 80
        internalPort: 8088
        type: ClusterIP
    bulk-api-adapter-service:
      config:
        central_services_host: $release_name-centralledger-service
        central_services_port: 80
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
        security:
          callback:
            rejectUnauthorized: true
      enabled: true
      image:
        command: '["node", "src/api/index.js"]'
        pullPolicy: Always
        repository: mojaloop/bulk-api-adapter
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath: /
        hosts:
          api: perf1-bulk-api-adapter.mojaloop.live
        tls: null
      init:
        enabled: true
        image:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      metrics:
        config:
          defaultLabels:
            serviceName: bulk-service
          prefix: moja_
          timeout: 5000
        enabled: true
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      replicaCount: 0
      resources: {}
      service:
        externalPort: 80
        internalPort: 8088
        type: ClusterIP
  bulk-centralledger:
    cl-handler-bulk-transfer-fulfil:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_disabled: false
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--bulkfulfil"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: false
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-bulkfulfil.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-bulkfulfil
          prefix: moja_
          timeout: 5000
        enabled: true
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
    cl-handler-bulk-transfer-prepare:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_disabled: false
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--bulkprepare"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-bulkprepare.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-bulkprepare
          prefix: moja_
          timeout: 5000
        enabled: true
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
    cl-handler-bulk-transfer-processing:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_disabled: false
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--bulkprocessing"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: false
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-bulkprocessing.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-bulkprocessing
          prefix: moja_
          timeout: 5000
        enabled: true
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
  enabled: false
  mongodb:
    additionalLabels: {}
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.mojaloop.io
              operator: In
              values:
              - data
    clusterDomain: cluster.local
    configmap: null
    enabled: true
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/mongodb
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: forekshub/percona-mongodb-exporter
        tag: latest
      podAnnotations:
        prometheus.io/port: "9216"
        prometheus.io/scrape: "true"
      serviceMonitor:
        additionalLabels: {}
        alerting:
          rules: {}
        enabled: false
    mongodbDatabase: mlos
    mongodbEnableIPv6: true
    mongodbExtraFlags: []
    mongodbPassword: password
    mongodbUsername: mojaloop
    nameOverride: centralledger-obj
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: false
      size: 8Gi
    podAnnotations: {}
    podLabels: {}
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaSet:
      enabled: false
      name: rs0
      pdb:
        minAvailable:
          arbiter: 1
          primary: 1
          secondary: 1
      replicas:
        arbiter: 1
        secondary: 1
      useHostnames: true
    resources: {}
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    service:
      annotations: {}
      port: 27017
      type: ClusterIP
    tolerations:
    - effect: NoSchedule
      key: node-role.mojaloop.io
      operator: Equal
      value: data
    usePassword: true
quoting-service:
  config:
    db_acquire_timeout_millis: 30000
    db_connection_pool_max: 30
    db_connection_pool_min: 10
    db_create_retry_interval_millis: 200
    db_create_timeout_millis: 30000
    db_database: central_ledger
    db_debug: false
    db_destroy_timeout_millis: 5000
    db_driver: mysql
    db_host: $release_name-centralledger-mysql
    db_idle_timeout_millis: 30000
    db_password: oyMxgZChuu
    db_port: 3306
    db_reap_interval_millis: 1000
    db_type: mysql
    db_user: central_ledger
    log_level: info
    simple_routing_mode_enabled: false
  image:
    pullPolicy: Always
    repository: mojaloop/quoting-service
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    enabled: true
    externalPath: /
    hosts:
      api: perf1-quoting-service.mojaloop.live
    tls: null
  init:
    enabled: true
    mysql:
      command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
        -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
        && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
        fi; do echo waiting for MySQL; sleep 2; done;
      name: wait-for-mysql
      pullPolicy: Always
      repository: mysql
      tag: latest
  livenessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  readinessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  replicaCount: 0
  resources: {}
  service:
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        api:
          externalPort: 3002
          name: http-api
    ports:
      api:
        externalPort: 80
        internalPort: 3002
        name: http-api
    type: ClusterIP
simulator:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: node-role.mojaloop.io
            operator: In
            values:
            - ml_sim
  config:
    HTTP_HOST_PORT: 8444
    HTTP_KEEPALIVE: true
    HTTP_KEEPALIVEMS: 1000
    HTTP_MAXFREESOCKETS: 20
    HTTP_MAXSOCKETS: 20
    HTTP_TIMEOUTMS: 1000
    LOG_LEVEL: info
    MOCK_JWS_SIGNATURE: abcJjvNrkyK2KBieDUbGfhaBUn75aDUATNF4joqA8OLs4QgSD7i6EO8BIdy6Crph3LnXnTM20Ai1Z6nt0zliS_qPPLU9_vi6qLb15FOkl64DQs9hnfoGeo2tcjZJ88gm19uLY_s27AJqC1GH1B8E2emLrwQMDMikwQcYvXoyLrL7LL3CjaLMKdzR7KTcQi1tCK4sNg0noIQLpV3eA61kess
    PARTIES_SERVICE_ENDPOINT: http://$release_name-account-lookup-service
    QUOTES_SERVICE_ENDPOINT: http://$release_name-quoting-service
    TRANSFERS_CONDITION: HOr22-H3AfTDHrSkPjJtVPRdKouuMkDXTR4ejlQa8Ks
    TRANSFERS_FULFIL_RESPONSE_DISABLED: false
    TRANSFERS_FULFILMENT: XoSz1cL0tljJSCp_VtIYmPNw-zFUgGfbUqf69AagUzY
    TRANSFERS_ILPPACKET: AQAAAAAAAADIEHByaXZhdGUucGF5ZWVmc3CCAiB7InRyYW5zYWN0aW9uSWQiOiIyZGY3NzRlMi1mMWRiLTRmZjctYTQ5NS0yZGRkMzdhZjdjMmMiLCJxdW90ZUlkIjoiMDNhNjA1NTAtNmYyZi00NTU2LThlMDQtMDcwM2UzOWI4N2ZmIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkxMyIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTExIiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnt9fX0sImFtb3VudCI6eyJjdXJyZW5jeSI6IlVTRCIsImFtb3VudCI6IjIwMCJ9LCJ0cmFuc2FjdGlvblR5cGUiOnsic2NlbmFyaW8iOiJERVBPU0lUIiwic3ViU2NlbmFyaW8iOiJERVBPU0lUIiwiaW5pdGlhdG9yIjoiUEFZRVIiLCJpbml0aWF0b3JUeXBlIjoiQ09OU1VNRVIiLCJyZWZ1bmRJbmZvIjp7fX19
    TRANSFERS_SERVICE_ENDPOINT: http://$release_name-ml-api-adapter-service
    event_async_override: log,trace
    event_log_filter: ""
    event_trace_state_enabled: false
    event_trace_vendor: mojaloop
    event_traceid_per_vendor: false
  image:
    pullPolicy: Always
    repository: mojaloop/simulator-perf
    tag: m9.2.1-perf4.1.2
  imagePullSecrets: []
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    enabled: true
    hosts:
    - perf1-simulator.mojaloop.live
    path: /
    tls: []
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 8444
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
  metrics:
    defaultLabels:
      serviceName: simulator
    enabled: true
    prefix: moja_
    timeout: 5000
  nodeSelector: {}
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 8444
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
  replicaCount: 1
  resources: {}
  service:
    port: 80
    targetPort: http
    type: ClusterIP
  tolerations:
  - effect: NoSchedule
    key: node-role.mojaloop.io
    operator: Equal
    value: ml_sim
transaction-requests-service:
  enabled: false
  replicaCount: 0

COMPUTED VALUES:
account-lookup-service:
  account-lookup-service:
    affinity: {}
    config:
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      db_acquire_timeout_millis: 30000
      db_connection_pool_max: 30
      db_connection_pool_min: 10
      db_create_retry_interval_millis: 200
      db_create_timeout_millis: 30000
      db_database: account_lookup
      db_debug: false
      db_destroy_timeout_millis: 5000
      db_driver: mysql
      db_host: $release_name-account-lookup-mysql
      db_idle_timeout_millis: 30000
      db_password: OdonPianoX
      db_port: 3306
      db_reap_interval_millis: 1000
      db_type: mysql
      db_user: account_lookup
      display_routes: true
      end_point_cache:
        expiresIn: 180000
        generateTimeout: 30000
      error_handling:
        include_cause_extension: false
        truncate_extensions: true
      log_level: info
      log_transport: file
      run_migrations: false
    containers:
      admin:
        image:
          command: '["node", "src/index.js", "server", "--admin"]'
          pullPolicy: Always
          repository: mojaloop/account-lookup-service
          tag: v8.7.0
        service:
          ports:
            api:
              name: http-admin
              port: 4001
      api:
        image:
          command: '["node", "src/index.js", "server", "--api"]'
          pullPolicy: Always
          repository: mojaloop/account-lookup-service
          tag: v8.7.0
        service:
          ports:
            api:
              name: http-api
              port: 4002
    enabled: true
    fullnameOverride: ""
    global: {}
    ingress:
      annotations: {}
      enabled: true
      hosts:
      - perf1-account-lookup.mojaloop.live
      path: /
      tls: []
    init:
      enabled: true
      mysql:
        command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
          'select * from oracleEndpoint;' ; do echo waiting for MySQL; sleep 2; done;
        enabled: true
        name: wait-for-mysql
        pullPolicy: Always
        repository: mysql
        tag: latest
    metrics:
      config:
        defaultLabels:
          serviceName: account-lookup-service
        prefix: moja_
        timeout: 5000
      enabled: true
    nameOverride: ""
    nodeSelector: {}
    replicaCount: 0
    resources: {}
    service:
      port: 80
      type: ClusterIP
    tolerations: []
  account-lookup-service-admin:
    affinity: {}
    config:
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      db_acquire_timeout_millis: 30000
      db_connection_pool_max: 30
      db_connection_pool_min: 10
      db_create_retry_interval_millis: 200
      db_create_timeout_millis: 30000
      db_database: account_lookup
      db_debug: false
      db_destroy_timeout_millis: 5000
      db_driver: mysql
      db_host: $release_name-account-lookup-mysql
      db_idle_timeout_millis: 30000
      db_password: OdonPianoX
      db_port: 3306
      db_reap_interval_millis: 1000
      db_type: mysql
      db_user: account_lookup
      display_routes: true
      end_point_cache:
        expiresIn: 180000
        generateTimeout: 30000
      error_handling:
        include_cause_extension: false
        truncate_extensions: true
      log_level: info
      log_transport: file
      run_migrations: true
    containers:
      admin:
        image:
          command: '["node", "src/index.js", "server", "--admin"]'
          pullPolicy: Always
          repository: mojaloop/account-lookup-service
          tag: v8.7.0
        service:
          ports:
            api:
              name: http-admin
              port: 4001
      api:
        image:
          command: '["node", "src/index.js", "server", "--api"]'
          pullPolicy: Always
          repository: mojaloop/account-lookup-service
          tag: v8.7.0
        service:
          ports:
            api:
              name: http-api
              port: 4002
    enabled: true
    fullnameOverride: ""
    global: {}
    ingress:
      annotations: {}
      enabled: true
      hosts:
      - perf1-account-lookup-admin.mojaloop.live
      path: /
      tls: []
    init:
      enabled: true
      migration:
        command: npm run migrate
        enabled: true
        name: run-migration
      mysql:
        command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
          'select version()' ; do echo waiting for MySQL; sleep 2; done;
        enabled: true
        name: wait-for-mysql
        pullPolicy: Always
        repository: mysql
        tag: latest
    metrics:
      config:
        defaultLabels:
          serviceName: account-lookup-service-admin
        prefix: moja_
        timeout: 5000
      enabled: true
    nameOverride: ""
    nodeSelector: {}
    replicaCount: 0
    resources: {}
    service:
      port: 80
      type: ClusterIP
    tolerations: []
  als-oracle-pathfinder:
    config:
      db:
        account_lookup:
          database: account_lookup
          host: $release_name-account-lookup-mysql
          password: OdonPianoX
          port: "3306"
          user: account_lookup
        central_ledger:
          database: central_ledger
          host: $release_name-centralledger-mysql
          password: oyMxgZChuu
          port: "3306"
          user: central_ledger
        driver: mysql
        type: mysql
      log_level: info
      pathfinder:
        host: localhost
        port: 7007
        queryTimeoutMs: 10000
        tls:
          certs:
            client_cert: |-
              -----BEGIN CERTIFICATE-----
              MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
              UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
              CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
              DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
              NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
              b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
              DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
              9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
              E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
              UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
              G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
              IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
              Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
              SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
              bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
              EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
              Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
              gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
              eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
              -----END CERTIFICATE-----
            client_key: |-
              -----BEGIN PRIVATE KEY-----
              MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDgxTiKmKzu+uGw
              mXoB3SEgX+cQaNM8b/oqWIYTV5oBXE5z8+DDjeq4qO3zjoCrB31igynY0DHvjG9n
              g6dszBKmMNAZFBsxjseK5uxSIkyquy3pLkBCo8cmhoSuSdWNGi/Q3IBSOJrcdOG2
              SqtFPnbFOdMZjBzj3O34EqgbiK6u/jSF85N7hvuDcDrgJU0Rl7u36o9sAh7D0xTV
              fc4PcPSHMpnwyy2p5sttI9Uh+WfNT7wByDiasy9J1/o4695RRt/uvhCZ8L0B6s1W
              Jr8ZwC9sb8ZT5YQ6cl+n7xcC/6B9LRozalRt2tcuL83Fae/DpuHx76mNsFyWLyuh
              aauhFsU/AgMBAAECggEAWgPhvu+h4hsrI1Rznid2ysZdfR7d6chWgXruRvTAQmc7
              LAixLN+67rUIho+9S8E2H6uzqJbISM0PGH+LH3Eiztehn0mEEnbBxwjv/3ypA37u
              xgG1znpUmUMqA7qiAV5JY/XKliMBMeTFOAHzUUnQuu+LcSHBuCeUTdL66/vzKTT4
              oCKwB1vcnzfL5NS/7ownAgLsjNj3pgORRAY9sTDzUkjwrrN/m5nEfghycAcyXHDJ
              lQprc0xX4TI/Vd9ZkG+khAznkRaXiPJ1P1TwadgK5m53Imt2H3F0lmrhNCrul/l7
              F0Uf2tfNHHgSjyoGQkPryuqyf2NcMiUY1d4uCsnWEQKBgQDziD3gBkjguQZUc3Yb
              DqiCtaLkavndmRTPaAyUk95dUuiVEMhnDm8L7T+03PhVDjtXdy4PQUm61xr/Kw4J
              1VUArbIjzcs+OEGNvq99stThRBvszwNRSWS4kYIur3+ggddrewtL7s+hiAqeK88L
              n6vG4/eSKWJBQwF1001siKf7/QKBgQDsRxXGZkf+yVsuL/hSiadwRdD/OJ1O7gr2
              j8za6izaUX1anXLdPrvtOkdCgEC0Iy6hY0FMi0GWzklpY4SvZuxXlK6QkKB3SCE9
              E8RuOSFLouuaxgiau8MnAEUTkInTC+9foOa8znuOGC0JmzztlFf7P7CF8PoNTb4n
              x4a9dQSE6wKBgAjPfgWT1KEksIDvqG80KY6JCbqf0ChfOGyEhCf/7YSM0lNKRyXL
              VOMmky507BsPp7/zVNxCbWtwCs7+fMSITkn2/sHi2R6IJH7/ThQLGz6HG0eG+cTA
              Ff/Da+VKfiCNcgC2c+MsYaCjblbomNX/0dQhPTyxeJeJ2AyuN1fc3c71AoGBAIA2
              tsc5e3nz9AmlOEA5uGWBTT8hjqNlIwfW0pg8mOhDbh188PbD8yBxDng0tmfJ66Ti
              Am4x5v6ZpFaPDVJNLJT99pg2Ew2HU5ocHuydDcdIekc7jTHCD80bJWDPfyrKADRJ
              UMxF0+AwmEftOGvHotKRJg4YzOfpNvXJHQGz/SbPAoGAALJa010eqPHuZKQxpW4z
              4dpt1Fr16cbLnmIk16zxnvPbPJeCtEx8IkwgLIWP6zPOESIGBTslGMq6xIgYaOXZ
              G8S+fLF3J9sfE2gCJR1JSBXdlyWmcKJdyvhRt168hxVW1N4uHJ2KBA3vUhC/kRvh
              3XDCWsEkXqU0KRzt+TkWVOQ=
              -----END PRIVATE KEY-----
            pathfinder_cert: |-
              -----BEGIN CERTIFICATE-----
              MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
              UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
              CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
              DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
              NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
              b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
              DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
              9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
              E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
              UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
              G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
              IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
              Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
              SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
              bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
              EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
              Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
              gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
              eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
              -----END CERTIFICATE-----
            pathfinder_intermediate_cert: |-
              -----BEGIN CERTIFICATE-----
              MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
              UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
              CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
              DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
              NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
              b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
              DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
              9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
              E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
              UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
              G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
              IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
              Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
              SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
              bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
              EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
              Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
              gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
              eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
              -----END CERTIFICATE-----
          client_cert_path: /opt/als-oracle-pathfinder/secrets/client_cert.pem
          client_key_path: /opt/als-oracle-pathfinder/secrets/client_key.pem
          intermediate_cert_path: /opt/als-oracle-pathfinder/secrets/pathfinder_intermediate_cert.pem
          rejectUnauthorized: false
          root_cert_path: /opt/als-oracle-pathfinder/secrets/pathfinder_cert.pem
    enabled: false
    image:
      command: '["node", "/opt/als-oracle-pathfinder/src/index.js"]'
      imagePullSecrets: []
      pullPolicy: Always
      repository: mojaloop/als-oracle-pathfinder
      tag: v8.7.1
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: als-oracle-pathfinder.local
      tls: null
    init:
      enabled: true
      initMysql:
        accountLookup:
          command: mysql -h test-account-lookup-mysql -P $db_port -u account_lookup
            --password=OdonPianoX account_lookup -e "SET @service_name='$service_name';
            source /opt/als-oracle-pathfinder/init-account-lookup.sql;";
          name: init-account-lookup-mysql
          pullPolicy: Always
          repository: mojaloop/als-oracle-pathfinder
          tag: latest
        centralLedger:
          command: mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -e "SET @service_name='$service_name'; source /opt/als-oracle-pathfinder/init-central-ledger.sql;";
          name: init-central-ledger-mysql
          pullPolicy: Always
          repository: mojaloop/als-oracle-pathfinder
          tag: latest
      populateMysql:
        command: echo 'Nothing configured to be populated. Continuing...';
        name: populate-mysql-tables
        pullPolicy: Always
        repository: mysql
        tag: latest
      waitForMysql:
        command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
          'select version()' ; do echo waiting for MySQL; sleep 2; done;
        name: wait-for-mysql
        pullPolicy: Always
        repository: mysql
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /
      initialDelaySeconds: 45
      periodSeconds: 15
    readinessProbe:
      enabled: true
      httpGet:
        path: /
      initialDelaySeconds: 45
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          provisioning:
            externalPort: 3000
            name: http-api
      name: http-api
      port: 80
      type: ClusterIP
  global: {}
  mysql:
    allowRootFrom: '%'
    configFiles:
      node.cnf: |
        [mysqld]
        datadir=/var/lib/mysql
        default_storage_engine=InnoDB
        binlog_format=ROW
        innodb_flush_log_at_trx_commit  = 0
        innodb_flush_method             = O_DIRECT
        innodb_file_per_table           = 1
        innodb_autoinc_lock_mode=2
        bind_address = 0.0.0.0
        wsrep_slave_threads=2
        wsrep_cluster_address=gcomm://
        wsrep_provider=/usr/lib/galera3/libgalera_smm.so
        wsrep_cluster_name=galera
        wsrep_sst_method=xtrabackup-v2
        pxc_strict_mode=DISABLED
        max_connections=999
        max_user_connections=994
        thread_cache_size=999
    enabled: true
    global: {}
    image:
      pullPolicy: Always
      repository: percona/percona-xtradb-cluster
      tag: 5.7.19
    logTail: true
    metricsExporter:
      argsOverrides: []
      commandOverrides: []
      enabled: true
      tag: v0.11.0
    mysqlDatabase: account_lookup
    mysqlPassword: OdonPianoX
    mysqlUser: account_lookup
    nameOverride: account-lookup-mysql
    nodeSelector:
      node-role.mojaloop.io: data
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      size: 8Gi
    podAnnotations: {}
    podDisruptionBudget:
      enabled: false
      maxUnavailable: 1
    prometheus:
      operator:
        enabled: false
        prometheusRule:
          enabled: true
          labels: {}
        serviceMonitor:
          interval: 10s
    replicas: 0
    service:
      externalIPs: []
      percona:
        headless: false
      port: 3306
      type: ClusterIP
    ssl:
      enabled: false
      secret: mysql-ssl-certs
    tolerations:
    - effect: NoSchedule
      key: node-role.mojaloop.io
      operator: Equal
      value: data
central:
  centraleventprocessor:
    config:
      PORT: 3080
      central_ledger_admin_host: $release_name-centralledger-service
      central_ledger_admin_port: 3001
      central_ledger_api_host: centralledger-service
      central_ledger_api_port: 3000
      hub_participant:
        name: hub
      kafka_host: $release_name-kafka
      kafka_port: 9092
      log_level: info
      log_transport: file
      mongo_database: mojaloop
      mongo_host: $release_name-cep-obj
      mongo_password: password
      mongo_port: 27017
      mongo_user: mojaloop
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: {}
    image:
      pullPolicy: Always
      repository: mojaloop/central-event-processor
      tag: v8.6.0
    ingress:
      annotations: null
      enabled: true
      externalPath: /
      hosts:
        api: central-event-processor.local
      tls: null
    init:
      enabled: true
      kafka:
        command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
          do echo waiting for Kafka; sleep 2; done;
        env: {}
        name: wait-for-kafka
        pullPolicy: Always
        repository: solsson/kafka
        tag: latest
      mongodb:
        command: mongo mongodb://$mongo_host:$mongo_port --eval "db.adminCommand('ping')"
        name: wait-for-mongodb
        pullPolicy: Always
        repository: bitnami/mongodb
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 30
      periodSeconds: 15
    mongodb:
      additionalLabels: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - data
      clusterDomain: cluster.local
      configmap: null
      enabled: false
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/mongodb
        tag: 4.0.3
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      metrics:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: forekshub/percona-mongodb-exporter
          tag: latest
        podAnnotations:
          prometheus.io/port: "9216"
          prometheus.io/scrape: "true"
        serviceMonitor:
          additionalLabels: {}
          alerting:
            rules: {}
          enabled: false
      mongodbDatabase: mojaloop
      mongodbEnableIPv6: true
      mongodbExtraFlags: []
      mongodbPassword: password
      mongodbRootPassword: adminpass
      mongodbUsername: mojaloop
      nameOverride: cep-obj
      nodeSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: false
        size: 8Gi
      podAnnotations: {}
      podLabels: {}
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicaCount: 0
      replicaSet:
        enabled: false
        name: rs0
        pdb:
          minAvailable:
            arbiter: 1
            primary: 1
            secondary: 1
        replicas:
          arbiter: 1
          secondary: 1
        useHostnames: true
      resources: {}
      securityContext:
        enabled: true
        fsGroup: 1001
        runAsUser: 1001
      service:
        annotations: {}
        port: 27017
        type: ClusterIP
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: data
      usePassword: true
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 30
      periodSeconds: 15
    replicaCount: 0
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3080
            name: central-event-processor
      externalPort: 80
      internalPort: 3080
      name: central-event-processor
      type: ClusterIP
  centralledger:
    centralledger-handler-admin-transfer:
      affinity: {}
      config:
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_async_override: log,trace
        event_log_filter: ""
        event_log_metadata_only: false
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        event_traceid_per_vendor: false
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_partitioner: random
        kafka_port: 9092
        log_filter: error, warn, info
        log_level: error
        log_transport: file
        objstore_disabled: true
        objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--admin"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v9.5.1-snapshot
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      global: {}
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-admin-transfer.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-admin-transfer
          prefix: moja_
          timeout: 5000
        enabled: false
      nodeSelector: {}
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        config:
          event_log_filter: audit:*, log:info, log:error, log:warn
          event_log_metadata_only: true
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_filter: error, warn, info
          log_level: info
        enabled: false
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
      tolerations: []
    centralledger-handler-timeout:
      affinity: {}
      config:
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_async_override: log,trace
        event_log_filter: ""
        event_log_metadata_only: false
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        event_traceid_per_vendor: false
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_partitioner: random
        kafka_port: 9092
        log_filter: error, warn, info
        log_level: error
        log_transport: file
        objstore_disabled: true
        objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--timeout"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v9.5.1-snapshot
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      global: {}
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-timeout.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-timeout
          prefix: moja_
          timeout: 5000
        enabled: false
      nodeSelector: {}
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        config:
          event_log_filter: audit:*, log:info, log:error, log:warn
          event_log_metadata_only: true
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_filter: error, warn, info
          log_level: info
        enabled: false
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
      tolerations: []
    centralledger-handler-transfer-fulfil:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_fulfil
      config:
        cache_enabled: true
        cache_expires_in_ms: 60000
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        duplicate_fulfil_mode: INSERT_ONLY
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_async_override: log,trace
        event_log_filter: audit:*
        event_log_metadata_only: false
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        event_traceid_per_vendor: false
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_async_chained_mode: true
        kafka_autocommit_interval_ms: 100
        kafka_batch_count: 100
        kafka_batch_timeout: 50
        kafka_concurrency: 1
        kafka_host: $release_name-kafka
        kafka_mode: 0
        kafka_partitioner: random
        kafka_port: 9092
        kafka_sync: true
        log_filter: error, warn, info
        log_level: info
        log_transport: file
        objstore_disabled: true
        objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        raw_fulfilposition_enabled: true
        uv_threadpool_size: 12
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--fulfilPosition"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger-perf
            tag: v10.2.8-perf1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      global: {}
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-fulfil.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-fulfil
          prefix: moja_
          timeout: 5000
        enabled: true
      nodeSelector: {}
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        config:
          event_log_filter: audit:*, log:info, log:error, log:warn
          event_log_metadata_only: true
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_filter: error, warn, info
          log_level: info
        enabled: false
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: ml_cl_fulfil
    centralledger-handler-transfer-get:
      affinity: {}
      config:
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_async_override: log,trace
        event_log_filter: ""
        event_log_metadata_only: false
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        event_traceid_per_vendor: false
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_partitioner: random
        kafka_port: 9092
        log_filter: error, warn, info
        log_level: error
        log_transport: file
        objstore_disabled: true
        objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--get"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v9.5.1-snapshot
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      global: {}
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-get.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-get
          prefix: moja_
          timeout: 5000
        enabled: false
      nodeSelector: {}
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        config:
          event_log_filter: audit:*, log:info, log:error, log:warn
          event_log_metadata_only: true
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_filter: error, warn, info
          log_level: info
        enabled: false
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
      tolerations: []
    centralledger-handler-transfer-position:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_position
      config:
        cache_enabled: true
        cache_expires_in_ms: 60000
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_async_override: log,trace
        event_log_filter: audit:*
        event_log_metadata_only: false
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        event_traceid_per_vendor: false
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_async_chained_mode: true
        kafka_autocommit_interval_ms: 100
        kafka_batch_count: 100
        kafka_batch_timeout: 50
        kafka_concurrency: 1
        kafka_host: $release_name-kafka
        kafka_mode: 0
        kafka_partitioner: random
        kafka_port: 9092
        kafka_sync: true
        log_filter: error, warn, info
        log_level: info
        log_transport: file
        objstore_disabled: true
        objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        uv_threadpool_size: 12
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--position"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger-perf
            tag: v10.2.8-perf1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 30
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 30
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      global: {}
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-position.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-position
          prefix: moja_
          timeout: 5000
        enabled: true
      nodeSelector: {}
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        config:
          event_log_filter: audit:*, log:info, log:error, log:warn
          event_log_metadata_only: true
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_filter: error, warn, info
          log_level: info
        enabled: false
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: ml_cl_position
    centralledger-handler-transfer-prepare:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_prepare
      config:
        cache_enabled: true
        cache_expires_in_ms: 60000
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        duplicate_prepare_mode: INSERT_ONLY
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_async_override: log,trace
        event_log_filter: audit:*
        event_log_metadata_only: false
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        event_traceid_per_vendor: false
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_async_chained_mode: true
        kafka_autocommit_interval_ms: 100
        kafka_batch_count: 100
        kafka_batch_timeout: 50
        kafka_concurrency: 1
        kafka_host: $release_name-kafka
        kafka_mode: 0
        kafka_partitioner: random
        kafka_port: 9092
        kafka_sync: true
        log_filter: error, warn, info
        log_level: info
        log_transport: file
        objstore_disabled: true
        objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        uv_threadpool_size: 12
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--preparePosition"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger-perf
            tag: v10.2.8-perf1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      global: {}
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-prepare.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-prepare
          prefix: moja_
          timeout: 5000
        enabled: true
      nodeSelector: {}
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        config:
          event_log_filter: audit:*, log:info, log:error, log:warn
          event_log_metadata_only: true
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_filter: error, warn, info
          log_level: info
        enabled: false
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: ml_cl_prepare
    centralledger-service:
      affinity: {}
      config:
        cache_enabled: false
        cache_expires_in_ms: 60000
        cache_max_byte_size: 10000000
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        event_async_override: log,trace
        event_log_filter: audit:*
        event_log_metadata_only: false
        event_trace_state_enabled: true
        event_trace_vendor: mojaloop
        event_traceid_per_vendor: false
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_async_chained_mode: true
        kafka_batch_count: 100
        kafka_batch_timeout: 50
        kafka_concurrency: 1
        kafka_host: $release_name-kafka
        kafka_mode: 0
        kafka_partitioner: random
        kafka_port: 9092
        kafka_sync: true
        log_filter: error, warn, info
        log_level: info
        log_transport: file
        objstore_disabled: true
        objstore_uri: mongodb://$release_name-centralledger-obj:27017/mlos
        uv_threadpool_size: 12
      containers:
        api:
          image:
            command: '["node", "src/api/index.js"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger-perf
            tag: v10.2.8-perf1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health?simple
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      global: {}
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: perf1-central-ledger.mojaloop.live
        tls: null
        type: http
      init:
        enabled: true
        migration:
          command: npm run migrate
          config:
            run_data_migration: true
          enabled: true
          name: run-migration
        mysql:
          command: until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e
            'select version()' ; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-service
          prefix: moja_
          timeout: 5000
        enabled: true
      nodeSelector: {}
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
      sidecar:
        config:
          event_log_filter: audit:*, log:info, log:error, log:warn
          event_log_metadata_only: true
          event_logger_grpc_host: localhost
          event_logger_grpc_port: 50051
          log_filter: error, warn, info
          log_level: info
        enabled: false
        image:
          command: '["npm", "run", "start"]'
          pullPolicy: Always
          repository: mojaloop/event-sidecar
          tag: v8.8.0-snapshot.3
        livenessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 90
          periodSeconds: 15
        readinessProbe:
          enabled: true
          httpGet:
            path: /health
          initialDelaySeconds: 120
          periodSeconds: 15
        service:
          internalPort: 4001
      tolerations: []
    enabled: true
    forensicloggingsidecar:
      centralkms:
        enabled: true
        image:
          pullPolicy: Always
          repository: mojaloop/central-kms
          tag: v2.4
        ingress:
          annotations: null
          enabled: true
          externalPath: /
          hosts:
          - central-kms.local
          tls: null
        livenessProbe:
          enabled: true
          httpGet:
            path: /sidecars
          initialDelaySeconds: 30
          periodSeconds: 5
        nameOverride: centralkms
        postgresql:
          enabled: true
          nameOverride: centralkms-postgresql
          postgresPassword: xD873IyaQB
          postgresUser: kms
          service:
            externalIPs: []
            port: 5432
            type: ClusterIP
        readinessProbe:
          enabled: true
          httpGet:
            path: /sidecars
          initialDelaySeconds: 30
          periodSeconds: 5
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 8080
                name: http-api-and-tcp-websocket
          externalPort: 8080
          internalPort: 8080
          name: http-api-and-tcp-websocket
          type: ClusterIP
      config: {}
      enabled: false
      image:
        pullPolicy: Always
        repository: mojaloop/forensic-logging-sidecar
        tag: v2.4
      ingress:
        annotations: null
        enabled: false
        externalPath: /
        hosts:
          api: forensic-logging-sidecar.local
        tls: null
      livenessProbe:
        enabled: true
        initialDelaySeconds: 90
        periodSeconds: 15
      nameOverride: forensicloggingsidecar-ledger
      postgresql:
        enabled: true
        nameOverride: forensicloggingsidecar-ledger-postgresql
        postgresPassword: Wqt0KlkKvL
        postgresUser: sidecar
        service:
          externalIPs: []
          port: 5432
          type: ClusterIP
      readinessProbe:
        enabled: true
        initialDelaySeconds: 90
        periodSeconds: 15
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 5678
              name: http-api-and-ws
        externalPort: 5678
        internalPort: 5678
        name: http-api-and-ws
        type: ClusterIP
    global: {}
    kafka:
      additionalPorts: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - broker
      configJob:
        backoffLimit: 6
      configurationOverrides:
        confluent.support.metrics.enable: false
        default.replication.factor: 1
        offsets.topic.replication.factor: 1
      enabled: true
      envOverrides:
        kafka.log4j.loggers: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
        kafka.log4j.root.loglevel: INFO
      external:
        distinct: false
        dns:
          useExternal: true
          useInternal: false
        domain: cluster.local
        enabled: false
        firstListenerPort: 31090
        init:
          image: lwolf/kubectl_deployer
          imagePullPolicy: IfNotPresent
          imageTag: "0.4"
        loadBalancerIP: []
        servicePort: 19092
        type: NodePort
      global: {}
      headless:
        port: 9092
      image: confluentinc/cp-kafka
      imagePullPolicy: IfNotPresent
      imageTag: 5.0.1
      jmx:
        configMap:
          enabled: true
          overrideConfig: {}
          overrideName: ""
        port: 5555
        whitelistObjectNames:
        - kafka.controller:*
        - kafka.server:*
        - java.lang:*
        - kafka.network:*
        - kafka.log:*
      kafkaHeapOptions: -Xmx1G -Xms1G
      logSubPath: logs
      nameOverride: kafka
      nodeSelector: {}
      persistence:
        enabled: false
        mountPath: /opt/kafka/data
        size: 1Gi
      podAnnotations: {}
      podManagementPolicy: OrderedReady
      prometheus:
        jmx:
          enabled: true
          image: solsson/kafka-prometheus-jmx-exporter@sha256
          imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
          interval: 10s
          port: 5556
          resources: {}
          scrapeTimeout: 10s
        kafka:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: node-role.mojaloop.io
                    operator: In
                    values:
                    - broker
          enabled: true
          image: danielqsj/kafka-exporter
          imageTag: v1.0.1
          interval: 10s
          nodeSelector: {}
          port: 9308
          resources: {}
          scrapeTimeout: 10s
          tolerations:
          - effect: NoSchedule
            key: node-role.mojaloop.io
            operator: Equal
            value: broker
        operator:
          enabled: false
          serviceMonitor:
            namespace: monitoring
            selector:
              prometheus: kube-prometheus
      rbac:
        enabled: true
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicas: 5
      resources: {}
      terminationGracePeriodSeconds: 60
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: broker
      topics: []
      updateStrategy:
        type: OnDelete
      zookeeper:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.mojaloop.io
                  operator: In
                  values:
                  - broker
        enabled: true
        env:
          JMXAUTH: "false"
          JMXDISABLE: "false"
          JMXPORT: 1099
          JMXSSL: "false"
          ZK_CLIENT_PORT: 2181
          ZK_ELECTION_PORT: 3888
          ZK_HEAP_SIZE: 1G
          ZK_INIT_LIMIT: 5
          ZK_LOG_LEVEL: INFO
          ZK_MAX_CLIENT_CNXNS: 60
          ZK_MAX_SESSION_TIMEOUT: 40000
          ZK_MIN_SESSION_TIMEOUT: 4000
          ZK_PURGE_INTERVAL: 0
          ZK_SERVER_PORT: 2888
          ZK_SNAP_RETAIN_COUNT: 3
          ZK_SYNC_LIMIT: 10
          ZK_TICK_TIME: 2000
        exporters:
          jmx:
            config:
              lowercaseOutputName: false
              rules:
              - name: zookeeper_$2
                pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+)><>(\w+)
              - labels:
                  replicaId: $2
                name: zookeeper_$3
                pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                  name1=replica.(\d+)><>(\w+)
              - labels:
                  memberType: $3
                  replicaId: $2
                name: zookeeper_$4
                pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                  name1=replica.(\d+), name2=(\w+)><>(\w+)
              - labels:
                  memberType: $3
                  replicaId: $2
                name: zookeeper_$4_$5
                pattern: org.apache.ZooKeeperService<name0=ReplicatedServer_id(\d+),
                  name1=replica.(\d+), name2=(\w+), name3=(\w+)><>(\w+)
              startDelaySeconds: 30
            enabled: false
            env: {}
            image:
              pullPolicy: IfNotPresent
              repository: sscaling/jmx-prometheus-exporter
              tag: 0.3.0
            livenessProbe:
              failureThreshold: 8
              httpGet:
                path: /metrics
                port: jmxxp
              initialDelaySeconds: 30
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 60
            path: /metrics
            ports:
              jmxxp:
                containerPort: 9404
                protocol: TCP
            readinessProbe:
              failureThreshold: 8
              httpGet:
                path: /metrics
                port: jmxxp
              initialDelaySeconds: 30
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 60
            resources: {}
          zookeeper:
            config:
              logLevel: info
              resetOnScrape: "true"
            enabled: false
            env: {}
            image:
              pullPolicy: IfNotPresent
              repository: josdotso/zookeeper-exporter
              tag: v1.1.2
            livenessProbe:
              failureThreshold: 8
              httpGet:
                path: /metrics
                port: zookeeperxp
              initialDelaySeconds: 30
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 60
            path: /metrics
            ports:
              zookeeperxp:
                containerPort: 9141
                protocol: TCP
            readinessProbe:
              failureThreshold: 8
              httpGet:
                path: /metrics
                port: zookeeperxp
              initialDelaySeconds: 30
              periodSeconds: 15
              successThreshold: 1
              timeoutSeconds: 60
            resources: {}
        global: {}
        headless:
          annotations: {}
        heap: 1G
        image:
          PullPolicy: IfNotPresent
          pullPolicy: IfNotPresent
          repository: gcr.io/google_samples/k8szk
          tag: v3
        imagePullPolicy: IfNotPresent
        jobs:
          chroots:
            activeDeadlineSeconds: 300
            backoffLimit: 5
            completions: 1
            config:
              create: []
            enabled: false
            env: []
            parallelism: 1
            resources: {}
            restartPolicy: Never
        livenessProbe:
          exec:
            command:
            - zkOk.sh
          initialDelaySeconds: 20
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          size: 5Gi
        podAnnotations: {}
        podDisruptionBudget:
          maxUnavailable: 1
        podLabels: {}
        port: 2181
        ports:
          client:
            containerPort: 2181
            protocol: TCP
          election:
            containerPort: 3888
            protocol: TCP
          server:
            containerPort: 2888
            protocol: TCP
        priorityClassName: ""
        readinessProbe:
          exec:
            command:
            - zkOk.sh
          initialDelaySeconds: 20
        replicaCount: 3
        resources: {}
        securityContext:
          fsGroup: 1000
          runAsUser: 1000
        service:
          annotations: {}
          ports:
            client:
              port: 2181
              protocol: TCP
              targetPort: client
          type: ClusterIP
        terminationGracePeriodSeconds: 1800
        tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: broker
        updateStrategy:
          type: OnDelete
        url: ""
    mysql:
      allowRootFrom: '%'
      configFiles:
        node.cnf: |
          [mysqld]
          datadir=/var/lib/mysql
          default_storage_engine=InnoDB
          binlog_format=ROW
          innodb_flush_log_at_trx_commit  = 0
          innodb_flush_method             = O_DIRECT_NO_FSYNC
          innodb_file_per_table           = 1
          innodb_buffer_pool_size=50G
          innodb_log_file_size=4G
          max_connections=1000
          innodb_autoinc_lock_mode=2
          bind_address = 0.0.0.0
          wsrep_log_conflicts = 1
          wsrep_retry_autocommit=4
          wsrep_slave_threads=2
          wsrep_cluster_address=gcomm://
          wsrep_provider=/usr/lib/galera3/libgalera_smm.so
          wsrep_cluster_name=galera
          wsrep_sst_method=xtrabackup-v2
          pxc_strict_mode=DISABLED
      enabled: true
      global: {}
      image:
        pullPolicy: Always
        repository: percona/percona-xtradb-cluster
        tag: 5.7.19
      logTail: true
      metricsExporter:
        argsOverrides: []
        commandOverrides: []
        enabled: true
        tag: v0.11.0
      mysqlDatabase: central_ledger
      mysqlPassword: oyMxgZChuu
      mysqlUser: central_ledger
      nameOverride: centralledger-mysql
      nodeSelector:
        node-role.mojaloop.io: data
      persistence:
        accessMode: ReadWriteOnce
        enabled: false
        size: 8Gi
      podAnnotations: {}
      podDisruptionBudget:
        enabled: false
        maxUnavailable: 1
      prometheus:
        operator:
          enabled: false
          prometheusRule:
            enabled: true
            labels: {}
          serviceMonitor:
            interval: 10s
      replicas: 1
      service:
        externalIPs: []
        percona:
          headless: false
        port: 3306
        type: ClusterIP
      ssl:
        enabled: false
        secret: mysql-ssl-certs
      tolerations:
      - effect: NoSchedule
        key: node-role.mojaloop.io
        operator: Equal
        value: data
    nameOverride: centralledger
  centralsettlement:
    config:
      db_acquire_timeout_millis: 30000
      db_connection_pool_max: 30
      db_connection_pool_min: 10
      db_create_retry_interval_millis: 200
      db_create_timeout_millis: 30000
      db_database: central_ledger
      db_debug: false
      db_destroy_timeout_millis: 5000
      db_driver: mysql
      db_host: $release_name-centralledger-mysql
      db_idle_timeout_millis: 30000
      db_password: oyMxgZChuu
      db_port: 3306
      db_reap_interval_millis: 1000
      db_type: mysql
      db_user: central_ledger
      error_handling:
        include_cause_extension: false
        truncate_extensions: true
      hub_participant:
        id: 1
        name: hub
      kafka_host: $release_name-kafka
      kafka_port: 9092
      log_level: info
      log_transport: file
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/central-settlement
      tag: v8.6.0
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: perf1-central-settlement.mojaloop.live
      tls: null
    init:
      enabled: true
      mysql:
        command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
          -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
          && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
          fi; do echo waiting for MySQL; sleep 2; done;
        name: wait-for-mysql
        pullPolicy: Always
        repository: mysql
        tag: latest
    livenessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    readinessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    replicaCount: 0
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3007
            name: http-api
      ports:
        api:
          externalPort: 80
          internalPort: 3007
          name: http-api
      type: ClusterIP
  global: {}
centraleventprocessor:
  enabled: false
emailnotifier:
  config:
    PORT: 3081
    email:
      ciphers: SSLv3
      host: smtp-relay.sendinblue.com
      pass: znHXxEyQBrJd0c37
      port: 587
      user: valentin.genev@modusbox.com
    hub_participant:
      name: hub
    kafka_host: $release_name-kafka
    kafka_port: 9092
    log_level: info
    log_transport: file
  enabled: true
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: {}
  image:
    pullPolicy: Always
    repository: mojaloop/email-notifier
    tag: v8.7.0
  ingress:
    annotations: null
    enabled: true
    externalPath: /
    hosts:
      api: email-notifier.local
    tls: null
  init:
    enabled: true
    kafka:
      command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
        do echo waiting for Kafka; sleep 2; done;
      env: {}
      name: wait-for-kafka
      pullPolicy: Always
      repository: solsson/kafka
      tag: latest
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 30
    periodSeconds: 15
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 30
    periodSeconds: 15
  replicaCount: 0
  resources: {}
  service:
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        api:
          externalPort: 3081
          name: email-notifier
    externalPort: 80
    internalPort: 3081
    name: email-notifier
    type: ClusterIP
global: {}
ml-api-adapter:
  global: {}
  ml-api-adapter-handler-notification:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.mojaloop.io
              operator: In
              values:
              - ml_notify
    config:
      central_services_health_endpoint_param: /health?simple
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      endpoint_cache_expiresInMs: 4000000
      endpoint_cache_generateTimeoutMs: 30000
      error_handling:
        include_cause_extension: false
        truncate_extensions: true
      event_async_override: log,trace
      event_log_filter: ""
      event_log_metadata_only: false
      event_trace_vendor: mojaloop
      event_traceid_per_vendor: false
      http_config:
        httpAgent:
          keepAlive: true
          keepAliveMsecs: 1000
          maxFreeSockets: 20
          maxSockets: 20
      kafka_async_chained_mode: true
      kafka_autocommit_interval_ms: 100
      kafka_batch_count: 100
      kafka_batch_timeout: 50
      kafka_concurrency: 1
      kafka_host: $release_name-kafka
      kafka_mode: 0
      kafka_partitioner: random
      kafka_port: 9092
      log_filter: error, warn, info
      log_level: info
      log_transport: file
      max_callback_time_lag_dilation_milliseconds: 200
      max_fulfil_timeout_duration_seconds: 240
      security:
        callback:
          rejectUnauthorized: true
      send_transfer_confirmation_to_payee: false
      uv_threadpool_size: 12
    enabled: true
    global: {}
    image:
      command: '["node", "src/handlers/index.js", "handler", "--notification"]'
      pullPolicy: Always
      repository: mojaloop/ml-api-adapter-perf
      tag: v10.2.7-perf1
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: ml-api-adapter.local
      tls: null
    init:
      enabled: true
      image:
        command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
          do echo waiting for Kafka; sleep 2; done;
        env: {}
        name: wait-for-kafka
        pullPolicy: Always
        repository: solsson/kafka
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /health?simple
      initialDelaySeconds: 90
      periodSeconds: 15
    metrics:
      config:
        defaultLabels:
          serviceName: ml-handler-notification
        prefix: moja_
        timeout: 5000
      enabled: true
    nodeSelector: {}
    readinessProbe:
      enabled: true
      httpGet:
        path: /health?simple
      initialDelaySeconds: 120
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      externalPort: 80
      internalPort: 3000
      type: ClusterIP
    sidecar:
      config:
        event_log_filter: audit:*, log:info, log:error, log:warn
        event_log_metadata_only: true
        event_logger_grpc_host: localhost
        event_logger_grpc_port: 50051
        log_filter: error, warn, info
        log_level: info
      enabled: false
      image:
        command: '["npm", "run", "start"]'
        pullPolicy: Always
        repository: mojaloop/event-sidecar
        tag: v8.8.0-snapshot.3
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      service:
        internalPort: 4001
    tolerations:
    - effect: NoSchedule
      key: node-role.mojaloop.io
      operator: Equal
      value: ml_notify
  ml-api-adapter-service:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.mojaloop.io
              operator: In
              values:
              - ml_api
    central_services_health_endpoint_param: /health?simple
    config:
      central_services_health_endpoint_param: /health
      central_services_host: $release_name-centralledger-service
      central_services_port: 80
      error_handling:
        include_cause_extension: false
        truncate_extensions: true
      event_async_override: log,trace
      event_log_filter: audit:*
      event_log_metadata_only: false
      event_trace_state_enabled: true
      event_trace_vendor: mojaloop
      event_traceid_per_vendor: false
      http_config:
        httpAgent:
          keepAlive: true
          keepAliveMsecs: 1000
          maxFreeSockets: 20
          maxSockets: 20
      kafka_async_chained_mode: true
      kafka_batch_count: 100
      kafka_batch_timeout: 50
      kafka_concurrency: 1
      kafka_host: $release_name-kafka
      kafka_mode: 0
      kafka_partitioner: random
      kafka_port: 9092
      kafka_sync: true
      log_filter: error, warn, info
      log_level: info
      log_transport: file
      max_callback_time_lag_dilation_milliseconds: 200
      max_fulfil_timeout_duration_seconds: 240
      security:
        callback:
          rejectUnauthorized: true
      uv_threadpool_size: 12
    enabled: true
    global: {}
    image:
      command: '["node", "src/api/index.js"]'
      pullPolicy: Always
      repository: mojaloop/ml-api-adapter-perf
      tag: v10.2.7-perf1
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: perf1-ml-api-adapter.mojaloop.live
      tls: null
    init:
      enabled: true
      image:
        command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
          do echo waiting for Kafka; sleep 2; done;
        env: {}
        name: wait-for-kafka
        pullPolicy: Always
        repository: solsson/kafka
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /health?simple
      initialDelaySeconds: 90
      periodSeconds: 15
    metrics:
      config:
        defaultLabels:
          serviceName: ml-service
        prefix: moja_
        timeout: 5000
      enabled: true
    nodeSelector: {}
    readinessProbe:
      enabled: true
      httpGet:
        path: /health?simple
      initialDelaySeconds: 120
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      externalPort: 80
      internalPort: 3000
      type: ClusterIP
    sidecar:
      config:
        event_log_filter: audit:*, log:info, log:error, log:warn
        event_log_metadata_only: true
        event_logger_grpc_host: localhost
        event_logger_grpc_port: 50051
        log_filter: error, warn, info
        log_level: info
      enabled: false
      image:
        command: '["npm", "run", "start"]'
        pullPolicy: Always
        repository: mojaloop/event-sidecar
        tag: v8.8.0-snapshot.3
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      service:
        internalPort: 4001
    tolerations:
    - effect: NoSchedule
      key: node-role.mojaloop.io
      operator: Equal
      value: ml_api
mojaloop-bulk:
  bulk-api-adapter:
    bulk-api-adapter-handler-notification:
      config:
        central_services_host: $release_name-centralledger-service
        central_services_port: 80
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
        security:
          callback:
            rejectUnauthorized: true
      enabled: true
      image:
        command: '["node", "src/handlers/index.js", "handler", "--notification"]'
        pullPolicy: Always
        repository: mojaloop/bulk-api-adapter
        tag: v8.7.0-snapshot
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: false
        externalPath: /
        hosts:
          api: bulk-api-adapter-notification.local
      init:
        enabled: true
        image:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      metrics:
        config:
          defaultLabels:
            serviceName: bulk-handler-notification
          prefix: moja_
          timeout: 5000
        enabled: true
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        externalPort: 80
        internalPort: 8088
        type: ClusterIP
    bulk-api-adapter-service:
      config:
        central_services_host: $release_name-centralledger-service
        central_services_port: 80
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
        security:
          callback:
            rejectUnauthorized: true
      enabled: true
      image:
        command: '["node", "src/api/index.js"]'
        pullPolicy: Always
        repository: mojaloop/bulk-api-adapter
        tag: v8.7.0-snapshot
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath: /
        hosts:
          api: perf1-bulk-api-adapter.mojaloop.live
      init:
        enabled: true
        image:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 90
        periodSeconds: 15
      metrics:
        config:
          defaultLabels:
            serviceName: bulk-service
          prefix: moja_
          timeout: 5000
        enabled: true
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 120
        periodSeconds: 15
      replicaCount: 0
      resources: {}
      service:
        externalPort: 80
        internalPort: 8088
        type: ClusterIP
  bulk-centralledger:
    cl-handler-bulk-transfer-fulfil:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_disabled: false
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--bulkfulfil"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: false
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-bulkfulfil.local
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-bulkfulfil
          prefix: moja_
          timeout: 5000
        enabled: true
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
    cl-handler-bulk-transfer-prepare:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_disabled: false
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--bulkprepare"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-bulkprepare.local
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-bulkprepare
          prefix: moja_
          timeout: 5000
        enabled: true
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
    cl-handler-bulk-transfer-processing:
      config:
        db_acquire_timeout_millis: 30000
        db_connection_pool_max: 30
        db_connection_pool_min: 10
        db_create_retry_interval_millis: 200
        db_create_timeout_millis: 30000
        db_database: central_ledger
        db_debug: false
        db_destroy_timeout_millis: 5000
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_idle_timeout_millis: 30000
        db_password: oyMxgZChuu
        db_port: 3306
        db_reap_interval_millis: 1000
        db_type: mysql
        db_user: central_ledger
        error_handling:
          include_cause_extension: false
          truncate_extensions: true
        forensicloggingsidecar_disabled: true
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
        log_level: info
        objstore_disabled: false
        objstore_uri: mongodb://mojaloop:password@$release_name-centralledger-obj:27017/mlos
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--bulkprocessing"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v8.7.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 60
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 80
                internalPort: 3001
                name: http-api
      enabled: true
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: false
        externalPath:
          api: /
        hosts:
          api: central-ledger-transfer-bulkprocessing.local
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        mongodb:
          command: mongo $mongouri --eval "db.adminCommand('ping')"
          name: wait-for-mongodb
          pullPolicy: Always
          repository: bitnami/mongodb
          tag: latest
        mysql:
          command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
            -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
            && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
            fi; do echo waiting for MySQL; sleep 2; done;
          name: wait-for-mysql
          pullPolicy: Always
          repository: mysql
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      metrics:
        config:
          defaultLabels:
            serviceName: central-handler-bulkprocessing
          prefix: moja_
          timeout: 5000
        enabled: true
      replicaCount: 0
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 3001
              name: http-api
        type: ClusterIP
  enabled: false
  mongodb:
    additionalLabels: {}
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.mojaloop.io
              operator: In
              values:
              - data
    clusterDomain: cluster.local
    enabled: true
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/mongodb
      tag: 4.0.3
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: forekshub/percona-mongodb-exporter
        tag: latest
      podAnnotations:
        prometheus.io/port: "9216"
        prometheus.io/scrape: "true"
      serviceMonitor:
        additionalLabels: {}
        alerting:
          rules: {}
        enabled: false
    mongodbDatabase: mlos
    mongodbEnableIPv6: true
    mongodbExtraFlags: []
    mongodbPassword: password
    mongodbRootPassword: adminpass
    mongodbUsername: mojaloop
    nameOverride: centralledger-obj
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: false
      size: 8Gi
    podAnnotations: {}
    podLabels: {}
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaSet:
      enabled: false
      name: rs0
      pdb:
        minAvailable:
          arbiter: 1
          primary: 1
          secondary: 1
      replicas:
        arbiter: 1
        secondary: 1
      useHostnames: true
    resources: {}
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    service:
      annotations: {}
      port: 27017
      type: ClusterIP
    tolerations:
    - effect: NoSchedule
      key: node-role.mojaloop.io
      operator: Equal
      value: data
    usePassword: true
quoting-service:
  config:
    db_acquire_timeout_millis: 30000
    db_connection_pool_max: 30
    db_connection_pool_min: 10
    db_create_retry_interval_millis: 200
    db_create_timeout_millis: 30000
    db_database: central_ledger
    db_debug: false
    db_destroy_timeout_millis: 5000
    db_driver: mysql
    db_host: $release_name-centralledger-mysql
    db_idle_timeout_millis: 30000
    db_password: oyMxgZChuu
    db_port: 3306
    db_reap_interval_millis: 1000
    db_type: mysql
    db_user: central_ledger
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_trace_vendor: mojaloop
    kafka_host: $release_name-kafka
    kafka_port: 9092
    log_level: info
    log_transport: file
    simple_routing_mode_enabled: false
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: []
  image:
    pullPolicy: Always
    repository: mojaloop/quoting-service
    tag: v8.7.0-snapshot
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    enabled: true
    externalPath: /
    hosts:
      api: perf1-quoting-service.mojaloop.live
    tls: null
  init:
    enabled: true
    mysql:
      command: until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database
        -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result'
        && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false;
        fi; do echo waiting for MySQL; sleep 2; done;
      name: wait-for-mysql
      pullPolicy: Always
      repository: mysql
      tag: latest
  livenessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  readinessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  replicaCount: 0
  resources: {}
  rules: []
  service:
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        api:
          externalPort: 3002
          name: http-api
    ports:
      api:
        externalPort: 80
        internalPort: 3002
        name: http-api
    type: ClusterIP
  sidecar:
    config:
      event_logger_grpc_host: localhost
      event_logger_grpc_port: 50051
      log_level: info
    enabled: true
    image:
      command: '["npm", "run", "start"]'
      pullPolicy: Always
      repository: mojaloop/event-sidecar
      tag: v8.7.1
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    service:
      internalPort: 4001
simulator:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: node-role.mojaloop.io
            operator: In
            values:
            - ml_sim
  config:
    HTTP_HOST_PORT: 8444
    HTTP_KEEPALIVE: true
    HTTP_KEEPALIVEMS: 1000
    HTTP_MAXFREESOCKETS: 20
    HTTP_MAXSOCKETS: 20
    HTTP_TIMEOUTMS: 1000
    LOG_LEVEL: info
    MOCK_JWS_SIGNATURE: abcJjvNrkyK2KBieDUbGfhaBUn75aDUATNF4joqA8OLs4QgSD7i6EO8BIdy6Crph3LnXnTM20Ai1Z6nt0zliS_qPPLU9_vi6qLb15FOkl64DQs9hnfoGeo2tcjZJ88gm19uLY_s27AJqC1GH1B8E2emLrwQMDMikwQcYvXoyLrL7LL3CjaLMKdzR7KTcQi1tCK4sNg0noIQLpV3eA61kess
    PARTIES_SERVICE_ENDPOINT: http://$release_name-account-lookup-service
    QUOTES_SERVICE_ENDPOINT: http://$release_name-quoting-service
    TRANSFERS_CONDITION: HOr22-H3AfTDHrSkPjJtVPRdKouuMkDXTR4ejlQa8Ks
    TRANSFERS_FULFIL_RESPONSE_DISABLED: false
    TRANSFERS_FULFILMENT: XoSz1cL0tljJSCp_VtIYmPNw-zFUgGfbUqf69AagUzY
    TRANSFERS_ILPPACKET: AQAAAAAAAADIEHByaXZhdGUucGF5ZWVmc3CCAiB7InRyYW5zYWN0aW9uSWQiOiIyZGY3NzRlMi1mMWRiLTRmZjctYTQ5NS0yZGRkMzdhZjdjMmMiLCJxdW90ZUlkIjoiMDNhNjA1NTAtNmYyZi00NTU2LThlMDQtMDcwM2UzOWI4N2ZmIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkxMyIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTExIiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnt9fX0sImFtb3VudCI6eyJjdXJyZW5jeSI6IlVTRCIsImFtb3VudCI6IjIwMCJ9LCJ0cmFuc2FjdGlvblR5cGUiOnsic2NlbmFyaW8iOiJERVBPU0lUIiwic3ViU2NlbmFyaW8iOiJERVBPU0lUIiwiaW5pdGlhdG9yIjoiUEFZRVIiLCJpbml0aWF0b3JUeXBlIjoiQ09OU1VNRVIiLCJyZWZ1bmRJbmZvIjp7fX19
    TRANSFERS_SERVICE_ENDPOINT: http://$release_name-ml-api-adapter-service
    event_async_override: log,trace
    event_log_filter: ""
    event_trace_state_enabled: false
    event_trace_vendor: mojaloop
    event_traceid_per_vendor: false
  global: {}
  image:
    pullPolicy: Always
    repository: mojaloop/simulator-perf
    tag: m9.2.1-perf4.1.2
  imagePullSecrets: []
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    enabled: true
    hosts:
    - perf1-simulator.mojaloop.live
    path: /
    tls: []
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 8444
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
  metrics:
    defaultLabels:
      serviceName: simulator
    enabled: true
    prefix: moja_
    timeout: 5000
  nodeSelector: {}
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 8444
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 15
  replicaCount: 1
  resources: {}
  service:
    port: 80
    targetPort: http
    type: ClusterIP
  tolerations:
  - effect: NoSchedule
    key: node-role.mojaloop.io
    operator: Equal
    value: ml_sim
transaction-requests-service:
  config:
    central_services_host: $release_name-centralledger-service
    central_services_port: 80
    log_level: info
    log_transport: file
  enabled: false
  image:
    pullPolicy: Always
    repository: mojaloop/transaction-requests-service
    tag: v8.7.0
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    enabled: true
    externalPath: /
    hosts:
      api: transaction-request-service.local
    tls: null
  init:
    enabled: false
  livenessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  metrics:
    config:
      defaultLabels:
        serviceName: transaction-requests
      prefix: moja_
      timeout: 5000
    enabled: false
  readinessProbe:
    enabled: false
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  replicaCount: 0
  resources: {}
  service:
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        api:
          externalPort: 4001
          name: http-api
    ports:
      api:
        externalPort: 80
        internalPort: 4001
        name: http-api
    type: ClusterIP

HOOKS:
MANIFEST:

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: back-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.2.0
    release: back
    heritage: Tiller
    component: server
spec:
  selector:
    matchLabels:
      app: zookeeper
      release: back
      component: server
  maxUnavailable: 1
  

---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-account-lookup-mysql
  labels:
    app: back-account-lookup-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
type: Opaque
data:
  
  mysql-root-password: "ZG9qVW1ROEROeg=="
  
  
  mysql-password:  "T2RvblBpYW5vWA=="
  
  
  xtrabackup-password: "Z2J1T2t4bDRWZw=="
  

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralledger-handler-admin-transfer
  labels:
    app.kubernetes.io/name: centralledger-handler-admin-transfer
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-admin-transfer-8.8.0
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralledger-handler-timeout
  labels:
    app.kubernetes.io/name: centralledger-handler-timeout
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-timeout-8.8.0
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralledger-handler-transfer-fulfil
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-fulfil
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-fulfil-8.8.0
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralledger-handler-transfer-get
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-get
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-get-8.8.0
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralledger-handler-transfer-position
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-position
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-position-8.8.0
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralledger-handler-transfer-prepare
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-prepare
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-prepare-8.8.0
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralledger-service
  labels:
    app.kubernetes.io/name: centralledger-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-service-8.8.0
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralledger-mysql
  labels:
    app: back-centralledger-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
type: Opaque
data:
  
  mysql-root-password: "M3BhWXVpNWVnYg=="
  
  
  mysql-password:  "b3lNeGdaQ2h1dQ=="
  
  
  xtrabackup-password: "a1p2WUxLSzlEZQ=="
  

---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-centralsettlement
  labels:
    app.kubernetes.io/name: centralsettlement
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.6.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralsettlement-8.7.1
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/quoting-service/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: back-quoting-service
  labels:
    app.kubernetes.io/name: quoting-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0-snapshot
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: quoting-service-8.7.1
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QGJhY2stY2VudHJhbGxlZGdlci1teXNxbDozMzA2L2NlbnRyYWxfbGVkZ2Vy

---
# Source: mojaloop/charts/account-lookup-service/charts/account-lookup-service-admin/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-account-lookup-service-admin-config
  labels:
    app.kubernetes.io/name: account-lookup-service-admin
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: account-lookup-service-admin-8.7.1
data:
  default.json: "{\n  \"ADMIN_PORT\":  4001,\n  \"API_PORT\":  4002,\n  \"DATABASE\": {\n    \"DIALECT\": \"mysql\",\n    \"HOST\": \"back-account-lookup-mysql\",\n    \"PORT\": 3306,\n    \"USER\": \"account_lookup\",\n    \"PASSWORD\": \"OdonPianoX\",\n    \"DATABASE\": \"account_lookup\",\n    \"POOL_MIN_SIZE\": 10,\n    \"POOL_MAX_SIZE\": 30,\n    \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n    \"CREATE_TIMEOUT_MILLIS\": 30000,\n    \"DESTROY_TIMEOUT_MILLIS\": 5000,\n    \"IDLE_TIMEOUT_MILLIS\": 30000,\n    \"REAP_INTERVAL_MILLIS\": 1000,\n    \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n    \"DEBUG\": false\n  },\n  \"DISPLAY_ROUTES\": true,\n  \"RUN_MIGRATIONS\": true,\n  \"ENDPOINT_CACHE_CONFIG\": {\n    \"expiresIn\": 180000,\n    \"generateTimeout\": 30000\n  },\n  \"ERROR_HANDLING\": {\n    \"includeCauseExtension\": false,\n    \"truncateExtensions\": true\n  },\n  \"SWITCH_ENDPOINT\": \"http://back-centralledger-service:80\",\n  \"INSTRUMENTATION\": {\n    \"METRICS\": {\n      \"DISABLED\": false,\n      \"labels\": {\n        \"fspId\": \"*\"\n      },\n      \"config\": {\n        \"timeout\": 5000,\n        \"prefix\": \"moja_\",\n        \"defaultLabels\": {\n          \"serviceName\": \"account-lookup-service-admin\"\n        }\n      }\n    }\n  }\n}\n\n"
  knexfile.js: "'use strict'\nconst migrationsDirectory = '/opt/account-lookup-service/migrations'\nconst seedsDirectory = '/opt/account-lookup-service/seeds'\nconst Config = require('/opt/account-lookup-service/src/lib/config')\nmodule.exports = {\n    client: 'mysql',\n    version: '5.7',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}\n"

---
# Source: mojaloop/charts/account-lookup-service/charts/account-lookup-service/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-account-lookup-service-config
  labels:
    app.kubernetes.io/name: account-lookup-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: account-lookup-service-8.7.1
data:
  default.json: "{\n  \"ADMIN_PORT\":  4001,\n  \"API_PORT\":  4002,\n  \"DATABASE\": {\n    \"DIALECT\": \"mysql\",\n    \"HOST\": \"back-account-lookup-mysql\",\n    \"PORT\": 3306,\n    \"USER\": \"account_lookup\",\n    \"PASSWORD\": \"OdonPianoX\",\n    \"DATABASE\": \"account_lookup\",\n    \"POOL_MIN_SIZE\": 10,\n    \"POOL_MAX_SIZE\": 30,\n    \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n    \"CREATE_TIMEOUT_MILLIS\": 30000,\n    \"DESTROY_TIMEOUT_MILLIS\": 5000,\n    \"IDLE_TIMEOUT_MILLIS\": 30000,\n    \"REAP_INTERVAL_MILLIS\": 1000,\n    \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n    \"DEBUG\": false\n  },\n  \"DISPLAY_ROUTES\": true,\n  \"RUN_MIGRATIONS\": false,\n  \"ENDPOINT_CACHE_CONFIG\": {\n    \"expiresIn\": 180000,\n    \"generateTimeout\": 30000\n  },\n  \"SWITCH_ENDPOINT\": \"http://back-centralledger-service:80\",\n  \"ERROR_HANDLING\": {\n    \"includeCauseExtension\": false,\n    \"truncateExtensions\": true\n  },\n  \"INSTRUMENTATION\": {\n    \"METRICS\": {\n      \"DISABLED\": false,\n      \"labels\": {\n        \"fspId\": \"*\"\n      },\n      \"config\": {\n        \"timeout\": 5000,\n        \"prefix\": \"moja_\",\n        \"defaultLabels\": {\n          \"serviceName\": \"account-lookup-service\"\n        }\n      }\n    }\n  }\n}\n\n"
  knexfile.js: "'use strict'\nconst migrationsDirectory = '/opt/account-lookup-service/migrations'\nconst seedsDirectory = '/opt/account-lookup-service/seeds'\nconst Config = require('/opt/account-lookup-service/src/lib/config')\nmodule.exports = {\n    client: 'mysql',\n    version: '5.7',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}\n"

---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/config-map_mysql-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: back-account-lookup-mysql-config-files
  labels:
    app: back-account-lookup-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
data:
  node.cnf: |
    [mysqld]
    datadir=/var/lib/mysql
    default_storage_engine=InnoDB
    binlog_format=ROW
    innodb_flush_log_at_trx_commit  = 0
    innodb_flush_method             = O_DIRECT
    innodb_file_per_table           = 1
    innodb_autoinc_lock_mode=2
    bind_address = 0.0.0.0
    wsrep_slave_threads=2
    wsrep_cluster_address=gcomm://
    wsrep_provider=/usr/lib/galera3/libgalera_smm.so
    wsrep_cluster_name=galera
    wsrep_sst_method=xtrabackup-v2
    pxc_strict_mode=DISABLED
    max_connections=999
    max_user_connections=994
    thread_cache_size=999
  



---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/config-map_startup-scripts.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: back-account-lookup-mysql-startup-scripts
  labels:
    app: back-account-lookup-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
data:
  entrypoint.sh: |
    #!/bin/bash
    set -e
    
    if [[ -n "${DEBUG}" ]]; then
        set -x
    fi
    
    . /startup-scripts/functions.sh
    
    ipaddr=$(hostname -i | awk ' { print $1 } ')
    hostname=$(hostname)
    echo "I AM $hostname - $ipaddr"
    
    # if command starts with an option, prepend mysqld
    if [ "${1:0:1}" = '-' ]; then
        CMDARG="$@"
    fi
    
    cluster_join=$(resolveip -s "${K8S_SERVICE_NAME}" || echo "")
    if [[ -z "${cluster_join}" ]]; then
        echo "I am the Primary Node"
        init_mysql
        write_password_file
        exec mysqld --user=mysql --wsrep_cluster_name=$SHORT_CLUSTER_NAME --wsrep_node_name=$hostname \
        --wsrep_cluster_address=gcomm:// --wsrep_sst_method=xtrabackup-v2 \
        --wsrep_sst_auth="xtrabackup:$XTRABACKUP_PASSWORD" \
        --wsrep_node_address="$ipaddr" --pxc_strict_mode="$PXC_STRICT_MODE" $CMDARG
    else
        echo "I am not the Primary Node"
        chown -R mysql:mysql /var/lib/mysql || true # default is root:root 777
        touch /var/log/mysqld.log
        chown mysql:mysql /var/log/mysqld.log
        write_password_file
        exec mysqld --user=mysql --wsrep_cluster_name=$SHORT_CLUSTER_NAME --wsrep_node_name=$hostname \
        --wsrep_cluster_address="gcomm://$cluster_join" --wsrep_sst_method=xtrabackup-v2 \
        --wsrep_sst_auth="xtrabackup:$XTRABACKUP_PASSWORD" \
        --wsrep_node_address="$ipaddr" --pxc_strict_mode="$PXC_STRICT_MODE" $CMDARG
    fi
    
  functions.sh: |
    #!/bin/bash
    
    write_password_file() {
    if [[ -n "${MYSQL_ROOT_PASSWORD}" ]]; then
        cat <<EOF > /root/.my.cnf
        [client]
        user=root
        password=${MYSQL_ROOT_PASSWORD}
    EOF
    fi
    }
    
    init_mysql() {
    DATADIR=/var/lib/mysql
    # if we have CLUSTER_JOIN - then we do not need to perform datadir initialize
    # the data will be copied from another node
    if [ ! -e "$DATADIR/mysql" ]; then
        if [ -z "$MYSQL_ROOT_PASSWORD" -a -z "$MYSQL_ALLOW_EMPTY_PASSWORD" -a -z "$MYSQL_RANDOM_ROOT_PASSWORD" -a -z "$MYSQL_ROOT_PASSWORD_FILE" ]; then
                            echo >&2 'error: database is uninitialized and password option is not specified '
                            echo >&2 '  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ROOT_PASSWORD_FILE,  MYSQL_ALLOW_EMPTY_PASSWORD or MYSQL_RANDOM_ROOT_PASSWORD'
                            exit 1
                    fi
    
        if [ ! -z "$MYSQL_ROOT_PASSWORD_FILE" -a -z "$MYSQL_ROOT_PASSWORD" ]; then
        MYSQL_ROOT_PASSWORD=$(cat $MYSQL_ROOT_PASSWORD_FILE)
        fi
        mkdir -p "$DATADIR"
    
        echo "Running --initialize-insecure on $DATADIR"
        ls -lah $DATADIR
        if [ "$PERCONA_MAJOR" = "5.6" ]; then
            mysql_install_db --user=mysql --datadir="$DATADIR"
        else
            mysqld --user=mysql --datadir="$DATADIR" --initialize-insecure
        fi
        chown -R mysql:mysql "$DATADIR" || true # default is root:root 777
        if [ -f /var/log/mysqld.log ]; then
            chown mysql:mysql /var/log/mysqld.log
        fi
        echo 'Finished --initialize-insecure'
    
        mysqld --user=mysql --datadir="$DATADIR" --skip-networking &
        pid="$!"
    
        mysql=( mysql --protocol=socket -uroot )
    
        for i in {30..0}; do
        if echo 'SELECT 1' | "${mysql[@]}" &> /dev/null; then
            break
        fi
        echo 'MySQL init process in progress...'
        sleep 1
        done
        if [ "$i" = 0 ]; then
        echo >&2 'MySQL init process failed.'
        exit 1
        fi
    
        # sed is for https://bugs.mysql.com/bug.php?id=20545
        mysql_tzinfo_to_sql /usr/share/zoneinfo | sed 's/Local time zone must be set--see zic manual page/FCTY/' | "${mysql[@]}" mysql
        "${mysql[@]}" <<-EOSQL
        -- What's done in this file shouldn't be replicated
        --  or products like mysql-fabric won't work
        SET @@SESSION.SQL_LOG_BIN=0;
        CREATE USER 'root'@'${ALLOW_ROOT_FROM}' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' ;
        GRANT ALL ON *.* TO 'root'@'${ALLOW_ROOT_FROM}' WITH GRANT OPTION ;
        GRANT ALL ON *.* TO 'root'@'localhost' WITH GRANT OPTION ;
        CREATE USER 'xtrabackup'@'localhost' IDENTIFIED BY '$XTRABACKUP_PASSWORD';
        GRANT RELOAD,PROCESS,LOCK TABLES,REPLICATION CLIENT ON *.* TO 'xtrabackup'@'localhost';
        GRANT REPLICATION CLIENT ON *.* TO monitor@'%' IDENTIFIED BY 'monitor';
        GRANT PROCESS ON *.* TO monitor@localhost IDENTIFIED BY 'monitor';
        CREATE USER 'mysql'@'localhost' IDENTIFIED BY '' ;
        DROP DATABASE IF EXISTS test ;
        FLUSH PRIVILEGES ;
    EOSQL
    
        if [ "$PERCONA_MAJOR" = "5.6" ]; then
            echo "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('${MYSQL_ROOT_PASSWORD}'); FLUSH PRIVILEGES;" | "${mysql[@]}"
        else
            echo "ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}'; FLUSH PRIVILEGES;" | "${mysql[@]}"
        fi
    
        if [ ! -z "$MYSQL_ROOT_PASSWORD" ]; then
        mysql+=( -p"${MYSQL_ROOT_PASSWORD}" )
        fi
    
        if [ "$MYSQL_DATABASE" ]; then
        echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` ;" | "${mysql[@]}"
        mysql+=( "$MYSQL_DATABASE" )
        fi
    
        if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then
        echo "CREATE USER '"$MYSQL_USER"'@'%' IDENTIFIED BY '"$MYSQL_PASSWORD"' ;" | "${mysql[@]}"
    
        if [ "$MYSQL_DATABASE" ]; then
            echo "GRANT ALL ON \`"$MYSQL_DATABASE"\`.* TO '"$MYSQL_USER"'@'%' ;" | "${mysql[@]}"
        fi
    
        echo 'FLUSH PRIVILEGES ;' | "${mysql[@]}"
        fi
    
        if [ ! -z "$MYSQL_ONETIME_PASSWORD" ]; then
        "${mysql[@]}" <<-EOSQL
            ALTER USER 'root'@'%' PASSWORD EXPIRE;
    EOSQL
        fi
        if ! kill -s TERM "$pid" || ! wait "$pid"; then
        echo >&2 'MySQL init process failed.'
        exit 1
        fi
    
        echo
        echo 'MySQL init process done. Ready for start up.'
        echo
    fi
    
    }
    

---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/tests/pxc-test-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-account-lookup-mysql-tests
data:
  run.sh: |-
    echo "Testing Percona XtraDB Cluster"
    creds="-uroot -p${MYSQL_ROOT_PASSWORD} -h back-account-lookup-mysql"
    echo "==> basic mysql ping"
    mysqladmin $creds ping
    [[ $? != "0" ]] && exit $?
    echo "==> test basic query"
    mysql $creds -e "select now() \G"
    [[ $? != "0" ]] && exit $?
    echo "==> checking if cluster is ready"
    mysql $creds -e "SHOW GLOBAL STATUS LIKE 'wsrep_ready' \G" | grep Value | awk '{ print $2}' | grep ON
    [[ $? != "0" ]] && exit $?
    echo "==> checking if cluster size matches replica count"
    cluster_size=$(mysql $creds -e "SHOW GLOBAL STATUS LIKE 'wsrep_cluster_size' \G" | grep Value | awk '{ print $2}')
    [[ $? != "0" ]] && exit $?
    [[ "${cluster_size}" == "0" ]] || exit 1
    echo "SUCCESS"
    exit 0

---
# Source: mojaloop/charts/central/charts/centraleventprocessor/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centraleventprocessor-config
  labels:
    app.kubernetes.io/name: centraleventprocessor
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centraleventprocessor-8.7.1
data:
  default.json: "{\n    \"notificationMinutes\": {\n        \"resetPeriod\": 60,\n        \"notificationInterval\": 3,\n        \"oscilateEvents\": [\"NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL\"]\n    },\n    \"swaggerOptions\": {\n        \"info\": {\n            \"title\": \"Central notification system API Documentation\",\n            \"description\": \"Api Documentation for central-notification\"\n        },\n        \"expanded\": \"full\"\n    },\n    \"HUB_PARTICIPANT\": {\n        \"NAME\": \"hub\"\n    },\n    \"PORT\": 3080,\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"centralLedgerAPI\": {\n        \"adminHost\": \"back-centralledger-service\",\n        \"adminPort\": 3001\n    },\n    \"mongo\": {\n        \"user\": \"mojaloop\",\n        \"password\": \"password\",\n        \"uri\": \"back-cep-obj:27017\",\n        \"database\": \"mojaloop\",\n        \"ruleCollection\": \"Rule\",\n        \"netDebitCapPositionCollection\": \"NDCPosition\",\n        \"actionCollection\": \"Actions\",\n        \"eventCollection\": \"Events\",\n        \"limitCollection\": \"Limits\",\n        \"notificationEndpointCollection\": \"NotificationEndpoints\"\n  },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"NOTIFICATION_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-notification-event\",\n                \"REGEX\": \"topic-notification-event\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cep-con\",\n                            \"group.id\": \"cep-group\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 1\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cep-prod\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralledger-handler-admin-transfer-config
  labels:
    app.kubernetes.io/name: centralledger-handler-admin-transfer
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-admin-transfer-8.8.0
data:
  default.json: "\n{\n    \"PORT\": 3001,\n    \"HOSTNAME\": \"central-ledger-admin-transfer.local\",\n    \"MIGRATIONS\": {\n        \"DISABLED\": true,\n        \"RUN_DATA_MIGRATIONS\": true\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": true,\n        \"HOST\": \"back-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"DATABASE\": {\n        \"DIALECT\": \"mysql\",\n        \"HOST\": \"back-centralledger-mysql\",\n        \"PORT\": 3306,\n        \"USER\": \"central_ledger\",\n        \"PASSWORD\": \"oyMxgZChuu\",\n        \"SCHEMA\": \"central_ledger\",\n        \"POOL_MIN_SIZE\": 10,\n        \"POOL_MAX_SIZE\": 30,\n        \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n        \"CREATE_TIMEOUT_MILLIS\": 30000,\n        \"DESTROY_TIMEOUT_MILLIS\": 5000,\n        \"IDLE_TIMEOUT_MILLIS\": 30000,\n        \"REAP_INTERVAL_MILLIS\": 1000,\n        \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n        \"DEBUG\": false\n    },\n    \"MONGODB\": {\n        \"DISABLED\": true,\n        \"URI\": \"mongodb://back-centralledger-obj:27017/mlos\"\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"OVERRIDE_DISABLED\": {},\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": true,\n            \"labels\": {\n                \"fspId\": \"*\"\n            },\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"central-handler-admin-transfer\"\n                }\n            }\n        }\n    },\n    \"EMAIL_USER\": \"user\",\n    \"EMAIL_PASSWORD\": \"password\",\n    \"EMAIL_SMTP\": \"smtp.local\",\n    \"PARTICIPANT_INITIAL_POSITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"CACHE\": {\n        \"MAX_BYTE_SIZE\": 1e+07\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"BULK\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-prepare\",\n                            \"group.id\": \"cl-group-bulk-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-processing\",\n                            \"group.id\": \"cl-group-bulk-processing\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-fulfil\",\n                            \"group.id\": \"cl-group-bulk-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"group.id\": \"cl-group-transfer-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-position\",\n                            \"group.id\": \"cl-group-transfer-position\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"group.id\": \"cl-group-transfer-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"group.id\": \"cl-group-transfer-get\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-admin\",\n                            \"group.id\": \"cl-group-transfer-admin\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"BULK\": {\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-bulk-processing\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-position\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralledger-handler-timeout-config
  labels:
    app.kubernetes.io/name: centralledger-handler-timeout
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-timeout-8.8.0
data:
  default.json: "\n{\n    \"PORT\": 3001,\n    \"HOSTNAME\": \"central-ledger-timeout.local\",\n    \"MIGRATIONS\": {\n        \"DISABLED\": true,\n        \"RUN_DATA_MIGRATIONS\": true\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": true,\n        \"HOST\": \"back-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"DATABASE\": {\n        \"DIALECT\": \"mysql\",\n        \"HOST\": \"back-centralledger-mysql\",\n        \"PORT\": 3306,\n        \"USER\": \"central_ledger\",\n        \"PASSWORD\": \"oyMxgZChuu\",\n        \"SCHEMA\": \"central_ledger\",\n        \"POOL_MIN_SIZE\": 10,\n        \"POOL_MAX_SIZE\": 30,\n        \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n        \"CREATE_TIMEOUT_MILLIS\": 30000,\n        \"DESTROY_TIMEOUT_MILLIS\": 5000,\n        \"IDLE_TIMEOUT_MILLIS\": 30000,\n        \"REAP_INTERVAL_MILLIS\": 1000,\n        \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n        \"DEBUG\": false\n    },\n    \"MONGODB\": {\n        \"DISABLED\": true,\n        \"URI\": \"mongodb://back-centralledger-obj:27017/mlos\"\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"OVERRIDE_DISABLED\": {},\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": true,\n            \"labels\": {\n                \"fspId\": \"*\"\n            },\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"central-handler-timeout\"\n                }\n            }\n        }\n    },\n    \"EMAIL_USER\": \"user\",\n    \"EMAIL_PASSWORD\": \"password\",\n    \"EMAIL_SMTP\": \"smtp.local\",\n    \"PARTICIPANT_INITIAL_POSITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"CACHE\": {\n        \"MAX_BYTE_SIZE\": 1e+07\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"BULK\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-prepare\",\n                            \"group.id\": \"cl-group-bulk-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-processing\",\n                            \"group.id\": \"cl-group-bulk-processing\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-fulfil\",\n                            \"group.id\": \"cl-group-bulk-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"group.id\": \"cl-group-transfer-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-position\",\n                            \"group.id\": \"cl-group-transfer-position\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"group.id\": \"cl-group-transfer-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"group.id\": \"cl-group-transfer-get\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-admin\",\n                            \"group.id\": \"cl-group-transfer-admin\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"BULK\": {\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-bulk-processing\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-position\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralledger-handler-transfer-fulfil-config
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-fulfil
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-fulfil-8.8.0
data:
  default.json: "\n{\n    \"PORT\": 3001,\n    \"HOSTNAME\": \"central-ledger-transfer-fulfil.local\",\n    \"MIGRATIONS\": {\n        \"DISABLED\": true,\n        \"RUN_DATA_MIGRATIONS\": true\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": true,\n        \"HOST\": \"back-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"DATABASE\": {\n        \"DIALECT\": \"mysql\",\n        \"HOST\": \"back-centralledger-mysql\",\n        \"PORT\": 3306,\n        \"USER\": \"central_ledger\",\n        \"PASSWORD\": \"oyMxgZChuu\",\n        \"SCHEMA\": \"central_ledger\",\n        \"POOL_MIN_SIZE\": 10,\n        \"POOL_MAX_SIZE\": 30,\n        \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n        \"CREATE_TIMEOUT_MILLIS\": 30000,\n        \"DESTROY_TIMEOUT_MILLIS\": 5000,\n        \"IDLE_TIMEOUT_MILLIS\": 30000,\n        \"REAP_INTERVAL_MILLIS\": 1000,\n        \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n        \"DEBUG\": false\n    },\n    \"MONGODB\": {\n        \"DISABLED\": true,\n        \"URI\": \"mongodb://back-centralledger-obj:27017/mlos\"\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"OVERRIDE_DISABLED\": {},\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": false,\n            \"labels\": {\n                \"fspId\": \"*\"\n            },\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"central-handler-fulfil\"\n                }\n            }\n        }\n    },\n    \"EMAIL_USER\": \"user\",\n    \"EMAIL_PASSWORD\": \"password\",\n    \"EMAIL_SMTP\": \"smtp.local\",\n    \"PARTICIPANT_INITIAL_POSITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"CACHE\": {\n        \"CACHE_ENABLED\": true,\n        \"MAX_BYTE_SIZE\": 1e+07,\n        \"EXPIRES_IN_MS\": 60000\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"BULK\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-prepare\",\n                            \"group.id\": \"cl-group-bulk-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-processing\",\n                            \"group.id\": \"cl-group-bulk-processing\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-fulfil\",\n                            \"group.id\": \"cl-group-bulk-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"group.id\": \"cl-group-transfer-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-position\",\n                            \"group.id\": \"cl-group-transfer-position\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"group.id\": \"cl-group-transfer-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"group.id\": \"cl-group-transfer-get\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-admin\",\n                            \"group.id\": \"cl-group-transfer-admin\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"BULK\": {\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-bulk-processing\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-position\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralledger-handler-transfer-get-config
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-get
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-get-8.8.0
data:
  default.json: "\n{\n    \"PORT\": 3001,\n    \"HOSTNAME\": \"central-ledger-transfer-get.local\",\n    \"MIGRATIONS\": {\n        \"DISABLED\": true,\n        \"RUN_DATA_MIGRATIONS\": true\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": true,\n        \"HOST\": \"back-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"DATABASE\": {\n        \"DIALECT\": \"mysql\",\n        \"HOST\": \"back-centralledger-mysql\",\n        \"PORT\": 3306,\n        \"USER\": \"central_ledger\",\n        \"PASSWORD\": \"oyMxgZChuu\",\n        \"SCHEMA\": \"central_ledger\",\n        \"POOL_MIN_SIZE\": 10,\n        \"POOL_MAX_SIZE\": 30,\n        \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n        \"CREATE_TIMEOUT_MILLIS\": 30000,\n        \"DESTROY_TIMEOUT_MILLIS\": 5000,\n        \"IDLE_TIMEOUT_MILLIS\": 30000,\n        \"REAP_INTERVAL_MILLIS\": 1000,\n        \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n        \"DEBUG\": false\n    },\n    \"MONGODB\": {\n        \"DISABLED\": true,\n        \"URI\": \"mongodb://back-centralledger-obj:27017/mlos\"\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"OVERRIDE_DISABLED\": {},\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": true,\n            \"labels\": {\n                \"fspId\": \"*\"\n            },\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"central-handler-get\"\n                }\n            }\n        }\n    },\n    \"EMAIL_USER\": \"user\",\n    \"EMAIL_PASSWORD\": \"password\",\n    \"EMAIL_SMTP\": \"smtp.local\",\n    \"PARTICIPANT_INITIAL_POSITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"CACHE\": {\n        \"MAX_BYTE_SIZE\": 1e+07\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"BULK\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-prepare\",\n                            \"group.id\": \"cl-group-bulk-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-processing\",\n                            \"group.id\": \"cl-group-bulk-processing\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-fulfil\",\n                            \"group.id\": \"cl-group-bulk-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"group.id\": \"cl-group-transfer-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-position\",\n                            \"group.id\": \"cl-group-transfer-position\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"group.id\": \"cl-group-transfer-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"group.id\": \"cl-group-transfer-get\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-admin\",\n                            \"group.id\": \"cl-group-transfer-admin\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"BULK\": {\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-bulk-processing\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-position\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralledger-handler-transfer-position-config
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-position
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-position-8.8.0
data:
  default.json: "\n{\n    \"PORT\": 3001,\n    \"HOSTNAME\": \"central-ledger-transfer-position.local\",\n    \"MIGRATIONS\": {\n        \"DISABLED\": true,\n        \"RUN_DATA_MIGRATIONS\": true\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": true,\n        \"HOST\": \"back-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"DATABASE\": {\n        \"DIALECT\": \"mysql\",\n        \"HOST\": \"back-centralledger-mysql\",\n        \"PORT\": 3306,\n        \"USER\": \"central_ledger\",\n        \"PASSWORD\": \"oyMxgZChuu\",\n        \"SCHEMA\": \"central_ledger\",\n        \"POOL_MIN_SIZE\": 10,\n        \"POOL_MAX_SIZE\": 30,\n        \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n        \"CREATE_TIMEOUT_MILLIS\": 30000,\n        \"DESTROY_TIMEOUT_MILLIS\": 5000,\n        \"IDLE_TIMEOUT_MILLIS\": 30000,\n        \"REAP_INTERVAL_MILLIS\": 1000,\n        \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n        \"DEBUG\": false\n    },\n    \"MONGODB\": {\n        \"DISABLED\": true,\n        \"URI\": \"mongodb://back-centralledger-obj:27017/mlos\"\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"OVERRIDE_DISABLED\": {},\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": false,\n            \"labels\": {\n                \"fspId\": \"*\"\n            },\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"central-handler-position\"\n                }\n            }\n        }\n    },\n    \"EMAIL_USER\": \"user\",\n    \"EMAIL_PASSWORD\": \"password\",\n    \"EMAIL_SMTP\": \"smtp.local\",\n    \"PARTICIPANT_INITIAL_POSITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"CACHE\": {\n        \"CACHE_ENABLED\": true,\n        \"MAX_BYTE_SIZE\": 1e+07,\n        \"EXPIRES_IN_MS\": 60000\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"BULK\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-prepare\",\n                            \"group.id\": \"cl-group-bulk-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-processing\",\n                            \"group.id\": \"cl-group-bulk-processing\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-fulfil\",\n                            \"group.id\": \"cl-group-bulk-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"group.id\": \"cl-group-transfer-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-position\",\n                            \"group.id\": \"cl-group-transfer-position\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"group.id\": \"cl-group-transfer-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"group.id\": \"cl-group-transfer-get\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-admin\",\n                            \"group.id\": \"cl-group-transfer-admin\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"BULK\": {\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-bulk-processing\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-position\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralledger-handler-transfer-prepare-config
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-prepare
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-prepare-8.8.0
data:
  default.json: "\n{\n    \"PORT\": 3001,\n    \"HOSTNAME\": \"central-ledger-transfer-prepare.local\",\n    \"MIGRATIONS\": {\n        \"DISABLED\": true,\n        \"RUN_DATA_MIGRATIONS\": true\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": true,\n        \"HOST\": \"back-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"DATABASE\": {\n        \"DIALECT\": \"mysql\",\n        \"HOST\": \"back-centralledger-mysql\",\n        \"PORT\": 3306,\n        \"USER\": \"central_ledger\",\n        \"PASSWORD\": \"oyMxgZChuu\",\n        \"SCHEMA\": \"central_ledger\",\n        \"POOL_MIN_SIZE\": 10,\n        \"POOL_MAX_SIZE\": 30,\n        \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n        \"CREATE_TIMEOUT_MILLIS\": 30000,\n        \"DESTROY_TIMEOUT_MILLIS\": 5000,\n        \"IDLE_TIMEOUT_MILLIS\": 30000,\n        \"REAP_INTERVAL_MILLIS\": 1000,\n        \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n        \"DEBUG\": false\n    },\n    \"MONGODB\": {\n        \"DISABLED\": true,\n        \"URI\": \"mongodb://back-centralledger-obj:27017/mlos\"\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"OVERRIDE_DISABLED\": {},\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": false,\n            \"labels\": {\n                \"fspId\": \"*\"\n            },\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"central-handler-prepare\"\n                }\n            }\n        }\n    },\n    \"EMAIL_USER\": \"user\",\n    \"EMAIL_PASSWORD\": \"password\",\n    \"EMAIL_SMTP\": \"smtp.local\",\n    \"PARTICIPANT_INITIAL_POSITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"CACHE\": {\n        \"CACHE_ENABLED\": true,\n        \"MAX_BYTE_SIZE\": 1e+07,\n        \"EXPIRES_IN_MS\": 60000\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"BULK\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-prepare\",\n                            \"group.id\": \"cl-group-bulk-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-processing\",\n                            \"group.id\": \"cl-group-bulk-processing\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-fulfil\",\n                            \"group.id\": \"cl-group-bulk-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"group.id\": \"cl-group-transfer-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-position\",\n                            \"group.id\": \"cl-group-transfer-position\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"group.id\": \"cl-group-transfer-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"group.id\": \"cl-group-transfer-get\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-admin\",\n                            \"group.id\": \"cl-group-transfer-admin\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"BULK\": {\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-bulk-processing\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-position\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralledger-service-config
  labels:
    app.kubernetes.io/name: centralledger-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-service-8.8.0
data:
  default.json: "\n{\n    \"PORT\": 3001,\n    \"HOSTNAME\": \"perf1-central-ledger.mojaloop.live\",\n    \"MIGRATIONS\": {\n        \"DISABLED\": true,\n        \"RUN_DATA_MIGRATIONS\": true\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": true,\n        \"HOST\": \"back-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"DATABASE\": {\n        \"DIALECT\": \"mysql\",\n        \"HOST\": \"back-centralledger-mysql\",\n        \"PORT\": 3306,\n        \"USER\": \"central_ledger\",\n        \"PASSWORD\": \"oyMxgZChuu\",\n        \"SCHEMA\": \"central_ledger\",\n        \"POOL_MIN_SIZE\": 10,\n        \"POOL_MAX_SIZE\": 30,\n        \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n        \"CREATE_TIMEOUT_MILLIS\": 30000,\n        \"DESTROY_TIMEOUT_MILLIS\": 5000,\n        \"IDLE_TIMEOUT_MILLIS\": 30000,\n        \"REAP_INTERVAL_MILLIS\": 1000,\n        \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n        \"DEBUG\": false\n    },\n    \"MONGODB\": {\n        \"DISABLED\": true,\n        \"URI\": \"mongodb://back-centralledger-obj:27017/mlos\"\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": true,\n        \"OVERRIDE_DISABLED\": {},\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": false,\n            \"labels\": {\n                \"fspId\": \"*\"\n            },\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"central-service\"\n                }\n            }\n        }\n    },\n    \"EMAIL_USER\": \"user\",\n    \"EMAIL_PASSWORD\": \"password\",\n    \"EMAIL_SMTP\": \"smtp.local\",\n    \"PARTICIPANT_INITIAL_POSITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"CACHE\": {\n        \"MAX_BYTE_SIZE\": 1e+07\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"BULK\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-prepare\",\n                            \"group.id\": \"cl-group-bulk-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-processing\",\n                            \"group.id\": \"cl-group-bulk-processing\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-bulk-fulfil\",\n                            \"group.id\": \"cl-group-bulk-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"group.id\": \"cl-group-transfer-prepare\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-position\",\n                            \"group.id\": \"cl-group-transfer-position\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"group.id\": \"cl-group-transfer-fulfil\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"group.id\": \"cl-group-transfer-get\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-admin\",\n                            \"group.id\": \"cl-group-transfer-admin\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"BULK\": {\n                \"PROCESSING\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-bulk-processing\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"POSITION\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-position\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE.connection,\n    pool: Config.DATABASE.pool,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/configmap-jmx.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: back-kafka-metrics
  labels:
    app: kafka
    chart: kafka-0.13.11
    release: back
    heritage: Tiller
data:
  jmx-kafka-prometheus.yml: |+
    jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:5555/jmxrmi
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    ssl: false
    
    whitelistObjectNames: ["kafka.controller:*","kafka.server:*","java.lang:*","kafka.network:*","kafka.log:*"]
    
    rules:
    - pattern: kafka.controller<type=(ControllerChannelManager), name=(QueueSize), broker-id=(\d+)><>(Value)
      name: kafka_controller_$1_$2_$4
      labels:
        broker_id: "$3"
    - pattern: kafka.controller<type=(ControllerChannelManager), name=(TotalQueueSize)><>(Value)
      name: kafka_controller_$1_$2_$3
    - pattern: kafka.controller<type=(KafkaController), name=(.+)><>(Value)
      name: kafka_controller_$1_$2_$3
    - pattern: kafka.controller<type=(ControllerStats), name=(.+)><>(Count)
      name: kafka_controller_$1_$2_$3
    - pattern: kafka.server<type=(ReplicaFetcherManager), name=(.+), clientId=(.+)><>(Value)
      name: kafka_server_$1_$2_$4
      labels:
        client_id: "$3"
    - pattern : kafka.network<type=(Processor), name=(IdlePercent), networkProcessor=(.+)><>(Value)
      name: kafka_network_$1_$2_$4
      labels:
        network_processor: $3
    - pattern : kafka.network<type=(RequestMetrics), name=(RequestsPerSec), request=(.+)><>(Count)
      name: kafka_network_$1_$2_$4
      labels:
        request: $3
    - pattern: kafka.server<type=(.+), name=(.+), topic=(.+)><>(Count|OneMinuteRate)
      name: kafka_server_$1_$2_$4
      labels:
        topic: $3
    - pattern: kafka.server<type=(DelayedOperationPurgatory), name=(.+), delayedOperation=(.+)><>(Value)
      name: kafka_server_$1_$2_$3_$4
    - pattern: kafka.server<type=(.+), name=(.+)><>(Count|Value|OneMinuteRate)
      name: kafka_server_$1_total_$2_$3
    - pattern: kafka.server<type=(.+)><>(queue-size)
      name: kafka_server_$1_$2
    - pattern: java.lang<type=(.+), name=(.+)><(.+)>(\w+)
      name: java_lang_$1_$4_$3_$2
    - pattern: java.lang<type=(.+), name=(.+)><>(\w+)
      name: java_lang_$1_$3_$2
    - pattern : java.lang<type=(.*)>
    - pattern: kafka.log<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
      name: kafka_log_$1_$2
      labels:
        topic: $3
        partition: $4

---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/config-map_mysql-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: back-centralledger-mysql-config-files
  labels:
    app: back-centralledger-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
data:
  node.cnf: |
    [mysqld]
    datadir=/var/lib/mysql
    default_storage_engine=InnoDB
    binlog_format=ROW
    innodb_flush_log_at_trx_commit  = 0
    innodb_flush_method             = O_DIRECT_NO_FSYNC
    innodb_file_per_table           = 1
    innodb_buffer_pool_size=50G
    innodb_log_file_size=4G
    max_connections=1000
    innodb_autoinc_lock_mode=2
    bind_address = 0.0.0.0
    wsrep_log_conflicts = 1
    wsrep_retry_autocommit=4
    wsrep_slave_threads=2
    wsrep_cluster_address=gcomm://
    wsrep_provider=/usr/lib/galera3/libgalera_smm.so
    wsrep_cluster_name=galera
    wsrep_sst_method=xtrabackup-v2
    pxc_strict_mode=DISABLED
  



---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/config-map_startup-scripts.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: back-centralledger-mysql-startup-scripts
  labels:
    app: back-centralledger-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
data:
  entrypoint.sh: |
    #!/bin/bash
    set -e
    
    if [[ -n "${DEBUG}" ]]; then
        set -x
    fi
    
    . /startup-scripts/functions.sh
    
    ipaddr=$(hostname -i | awk ' { print $1 } ')
    hostname=$(hostname)
    echo "I AM $hostname - $ipaddr"
    
    # if command starts with an option, prepend mysqld
    if [ "${1:0:1}" = '-' ]; then
        CMDARG="$@"
    fi
    
    cluster_join=$(resolveip -s "${K8S_SERVICE_NAME}" || echo "")
    if [[ -z "${cluster_join}" ]]; then
        echo "I am the Primary Node"
        init_mysql
        write_password_file
        exec mysqld --user=mysql --wsrep_cluster_name=$SHORT_CLUSTER_NAME --wsrep_node_name=$hostname \
        --wsrep_cluster_address=gcomm:// --wsrep_sst_method=xtrabackup-v2 \
        --wsrep_sst_auth="xtrabackup:$XTRABACKUP_PASSWORD" \
        --wsrep_node_address="$ipaddr" --pxc_strict_mode="$PXC_STRICT_MODE" $CMDARG
    else
        echo "I am not the Primary Node"
        chown -R mysql:mysql /var/lib/mysql || true # default is root:root 777
        touch /var/log/mysqld.log
        chown mysql:mysql /var/log/mysqld.log
        write_password_file
        exec mysqld --user=mysql --wsrep_cluster_name=$SHORT_CLUSTER_NAME --wsrep_node_name=$hostname \
        --wsrep_cluster_address="gcomm://$cluster_join" --wsrep_sst_method=xtrabackup-v2 \
        --wsrep_sst_auth="xtrabackup:$XTRABACKUP_PASSWORD" \
        --wsrep_node_address="$ipaddr" --pxc_strict_mode="$PXC_STRICT_MODE" $CMDARG
    fi
    
  functions.sh: |
    #!/bin/bash
    
    write_password_file() {
    if [[ -n "${MYSQL_ROOT_PASSWORD}" ]]; then
        cat <<EOF > /root/.my.cnf
        [client]
        user=root
        password=${MYSQL_ROOT_PASSWORD}
    EOF
    fi
    }
    
    init_mysql() {
    DATADIR=/var/lib/mysql
    # if we have CLUSTER_JOIN - then we do not need to perform datadir initialize
    # the data will be copied from another node
    if [ ! -e "$DATADIR/mysql" ]; then
        if [ -z "$MYSQL_ROOT_PASSWORD" -a -z "$MYSQL_ALLOW_EMPTY_PASSWORD" -a -z "$MYSQL_RANDOM_ROOT_PASSWORD" -a -z "$MYSQL_ROOT_PASSWORD_FILE" ]; then
                            echo >&2 'error: database is uninitialized and password option is not specified '
                            echo >&2 '  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ROOT_PASSWORD_FILE,  MYSQL_ALLOW_EMPTY_PASSWORD or MYSQL_RANDOM_ROOT_PASSWORD'
                            exit 1
                    fi
    
        if [ ! -z "$MYSQL_ROOT_PASSWORD_FILE" -a -z "$MYSQL_ROOT_PASSWORD" ]; then
        MYSQL_ROOT_PASSWORD=$(cat $MYSQL_ROOT_PASSWORD_FILE)
        fi
        mkdir -p "$DATADIR"
    
        echo "Running --initialize-insecure on $DATADIR"
        ls -lah $DATADIR
        if [ "$PERCONA_MAJOR" = "5.6" ]; then
            mysql_install_db --user=mysql --datadir="$DATADIR"
        else
            mysqld --user=mysql --datadir="$DATADIR" --initialize-insecure
        fi
        chown -R mysql:mysql "$DATADIR" || true # default is root:root 777
        if [ -f /var/log/mysqld.log ]; then
            chown mysql:mysql /var/log/mysqld.log
        fi
        echo 'Finished --initialize-insecure'
    
        mysqld --user=mysql --datadir="$DATADIR" --skip-networking &
        pid="$!"
    
        mysql=( mysql --protocol=socket -uroot )
    
        for i in {30..0}; do
        if echo 'SELECT 1' | "${mysql[@]}" &> /dev/null; then
            break
        fi
        echo 'MySQL init process in progress...'
        sleep 1
        done
        if [ "$i" = 0 ]; then
        echo >&2 'MySQL init process failed.'
        exit 1
        fi
    
        # sed is for https://bugs.mysql.com/bug.php?id=20545
        mysql_tzinfo_to_sql /usr/share/zoneinfo | sed 's/Local time zone must be set--see zic manual page/FCTY/' | "${mysql[@]}" mysql
        "${mysql[@]}" <<-EOSQL
        -- What's done in this file shouldn't be replicated
        --  or products like mysql-fabric won't work
        SET @@SESSION.SQL_LOG_BIN=0;
        CREATE USER 'root'@'${ALLOW_ROOT_FROM}' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' ;
        GRANT ALL ON *.* TO 'root'@'${ALLOW_ROOT_FROM}' WITH GRANT OPTION ;
        GRANT ALL ON *.* TO 'root'@'localhost' WITH GRANT OPTION ;
        CREATE USER 'xtrabackup'@'localhost' IDENTIFIED BY '$XTRABACKUP_PASSWORD';
        GRANT RELOAD,PROCESS,LOCK TABLES,REPLICATION CLIENT ON *.* TO 'xtrabackup'@'localhost';
        GRANT REPLICATION CLIENT ON *.* TO monitor@'%' IDENTIFIED BY 'monitor';
        GRANT PROCESS ON *.* TO monitor@localhost IDENTIFIED BY 'monitor';
        CREATE USER 'mysql'@'localhost' IDENTIFIED BY '' ;
        DROP DATABASE IF EXISTS test ;
        FLUSH PRIVILEGES ;
    EOSQL
    
        if [ "$PERCONA_MAJOR" = "5.6" ]; then
            echo "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('${MYSQL_ROOT_PASSWORD}'); FLUSH PRIVILEGES;" | "${mysql[@]}"
        else
            echo "ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}'; FLUSH PRIVILEGES;" | "${mysql[@]}"
        fi
    
        if [ ! -z "$MYSQL_ROOT_PASSWORD" ]; then
        mysql+=( -p"${MYSQL_ROOT_PASSWORD}" )
        fi
    
        if [ "$MYSQL_DATABASE" ]; then
        echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` ;" | "${mysql[@]}"
        mysql+=( "$MYSQL_DATABASE" )
        fi
    
        if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then
        echo "CREATE USER '"$MYSQL_USER"'@'%' IDENTIFIED BY '"$MYSQL_PASSWORD"' ;" | "${mysql[@]}"
    
        if [ "$MYSQL_DATABASE" ]; then
            echo "GRANT ALL ON \`"$MYSQL_DATABASE"\`.* TO '"$MYSQL_USER"'@'%' ;" | "${mysql[@]}"
        fi
    
        echo 'FLUSH PRIVILEGES ;' | "${mysql[@]}"
        fi
    
        if [ ! -z "$MYSQL_ONETIME_PASSWORD" ]; then
        "${mysql[@]}" <<-EOSQL
            ALTER USER 'root'@'%' PASSWORD EXPIRE;
    EOSQL
        fi
        if ! kill -s TERM "$pid" || ! wait "$pid"; then
        echo >&2 'MySQL init process failed.'
        exit 1
        fi
    
        echo
        echo 'MySQL init process done. Ready for start up.'
        echo
    fi
    
    }
    

---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/tests/pxc-test-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralledger-mysql-tests
data:
  run.sh: |-
    echo "Testing Percona XtraDB Cluster"
    creds="-uroot -p${MYSQL_ROOT_PASSWORD} -h back-centralledger-mysql"
    echo "==> basic mysql ping"
    mysqladmin $creds ping
    [[ $? != "0" ]] && exit $?
    echo "==> test basic query"
    mysql $creds -e "select now() \G"
    [[ $? != "0" ]] && exit $?
    echo "==> checking if cluster is ready"
    mysql $creds -e "SHOW GLOBAL STATUS LIKE 'wsrep_ready' \G" | grep Value | awk '{ print $2}' | grep ON
    [[ $? != "0" ]] && exit $?
    echo "==> checking if cluster size matches replica count"
    cluster_size=$(mysql $creds -e "SHOW GLOBAL STATUS LIKE 'wsrep_cluster_size' \G" | grep Value | awk '{ print $2}')
    [[ $? != "0" ]] && exit $?
    [[ "${cluster_size}" == "1" ]] || exit 1
    echo "SUCCESS"
    exit 0

---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-centralsettlement-config
  labels:
    app.kubernetes.io/name: centralsettlement
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.6.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralsettlement-8.7.1
data:
  default.json: "\n{\n    \"PORT\": 3007,\n    \"HOSTNAME\": \"http://central-settlements.local\",\n    \"ERROR_HANDLING\": {\n      \"includeCauseExtension\": false,\n      \"truncateExtensions\": true\n    },\n    \"DATABASE\": {\n      \"DIALECT\": \"mysql\",\n      \"HOST\": \"back-centralledger-mysql\",\n      \"PORT\": 3306,\n      \"USER\": \"central_ledger\",\n      \"PASSWORD\": \"oyMxgZChuu\",\n      \"SCHEMA\": \"central_ledger\",\n      \"POOL_MIN_SIZE\": 10,\n      \"POOL_MAX_SIZE\": 30,\n      \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n      \"CREATE_TIMEOUT_MILLIS\": 30000,\n      \"DESTROY_TIMEOUT_MILLIS\": 5000,\n      \"IDLE_TIMEOUT_MILLIS\": 30000,\n      \"REAP_INTERVAL_MILLIS\": 1000,\n      \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n      \"DEBUG\": false\n    },\n    \"TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"hub\"\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n          \"GENERAL_TOPIC_TEMPLATE\": {\n            \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n            \"REGEX\": \"topic-(.*)-(.*)\"\n          }\n        },\n        \"PRODUCER\": {\n          \"NOTIFICATION\": {\n            \"EVENT\": {\n              \"config\": {\n                \"options\": {\n                  \"messageCharset\": \"utf8\"\n                },\n                \"rdkafkaConf\": {\n                  \"metadata.broker.list\": \"back-kafka:9092\",\n                  \"client.id\": \"cs-prod-notification-event\",\n                  \"event_cb\": true,\n                  \"socket.keepalive.enable\": true,\n                  \"queue.buffering.max.messages\": 10000000,\n                  \"dr_cb\": false\n                },\n                \"topicConf\": {\n                    \"request.required.acks\": \"all\"\n                }\n              }\n            }\n          }\n        }\n  }\n}"
---
# Source: mojaloop/charts/emailnotifier/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-emailnotifier-config
  labels:
    app.kubernetes.io/name: emailnotifier
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: emailnotifier-8.7.1
data:
  default.json: "{\n    \"emailSettings\": {\n        \"smtpConfig\": {\n            \"host\": \"smtp-relay.sendinblue.com\",\n            \"port\": 587,\n            \"secureConnection\": false,\n            \"tls\": {\n                \"ciphers\": \"SSLv3\"\n            },\n            \"auth\": {\n                \"user\": \"valentin.genev@modusbox.com\",\n                \"pass\": \"znHXxEyQBrJd0c37\"\n            }\n        }\n    },\n    \"PORT\": 3081,\n    \"HUB_PARTICIPANT\": {\n        \"NAME\": \"hub\"\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"NOTIFICATION_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-notification-event\",\n                \"REGEX\": \"topic-notification-event\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"enotifier-con\",\n                            \"group.id\": \"enotifier-group\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 1\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"enotifier-prod\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"

---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-ml-api-adapter-handler-notification-config
  labels:
    app.kubernetes.io/name: ml-api-adapter-handler-notification
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: ml-api-adapter-handler-notification-8.8.0
data:
  default.json: "{\n    \"PORT\": 3000,\n    \"ENDPOINT_SOURCE_URL\": \"http://back-centralledger-service:80\",\n    \"ENDPOINT_HEALTH_URL\": \"http://back-centralledger-service:80/health?simple\",\n    \"ENDPOINT_CACHE_CONFIG\": {\n        \"expiresIn\": 4e+06,\n        \"generateTimeout\": 30000\n    },\n    \"ENDPOINT_SECURITY\":{\n        \"TLS\": {\n            \"rejectUnauthorized\": true\n        }\n    },\n    \"HTTP_CONFIG\": {\n  \"httpAgent\": {\n    \"keepAlive\": true,\n    \"keepAliveMsecs\": 1000,\n    \"maxFreeSockets\": 20,\n    \"maxSockets\": 20\n  }\n},\n    \"HOSTNAME\": \"ml-api-adapter.local\",\n    \"MAX_CALLBACK_TIME_LAG_DILATION_MILLISECONDS\": 200,\n    \"MAX_FULFIL_TIMEOUT_DURATION_SECONDS\": 240,\n    \"TRANSFERS\": {\n        \"SEND_TRANSFER_CONFIRMATION_TO_PAYEE\": false\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"API\": {\n            \"DISABLED\": false\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": false,\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"ml-handler-notification\"\n                }\n            }\n        }\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            },\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"NOTIFICATION_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-notification-event\",\n                \"REGEX\": \"topic-notification-event\"\n            },\n            \"FULFIL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-transfer-fulfil\",\n                \"REGEX\": \"topic-transfer-fulfil\"\n            },\n            \"GET_TRANSFERS_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-transfer-get\",\n                \"REGEX\": \"topic-transfer-get\"\n            }\n        },\n        \"CONSUMER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"ml-con-notification-event\",\n                            \"group.id\": \"ml-group-notification-event\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true,\n                            \"enable.auto.commit\": true,\n                            \"auto.commit.interval.ms\": \"100\"\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"

---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-ml-api-adapter-service-config
  labels:
    app.kubernetes.io/name: ml-api-adapter-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: ml-api-adapter-service-8.8.0
data:
  default.json: "{\n    \"PORT\": 3000,\n    \"ENDPOINT_SOURCE_URL\": \"http://back-centralledger-service:80\",\n    \"ENDPOINT_HEALTH_URL\": \"http://back-centralledger-service:80/health\",\n    \"ENDPOINT_CACHE_CONFIG\": {\n        \"expiresIn\": 180000,\n        \"generateTimeout\": 30000\n    },\n    \"ENDPOINT_SECURITY\":{\n        \"TLS\": {\n            \"rejectUnauthorized\": true\n        }\n    },\n    \"HTTP_CONFIG\": {\n  \"httpAgent\": {\n    \"keepAlive\": true,\n    \"keepAliveMsecs\": 1000,\n    \"maxFreeSockets\": 20,\n    \"maxSockets\": 20\n  }\n},\n    \"HOSTNAME\": \"perf1-ml-api-adapter.mojaloop.live\",\n    \"MAX_CALLBACK_TIME_LAG_DILATION_MILLISECONDS\": 200,\n    \"MAX_FULFIL_TIMEOUT_DURATION_SECONDS\": 240,\n    \"TRANSFERS\": {\n        \"SEND_TRANSFER_CONFIRMATION_TO_PAYEE\": false\n    },\n    \"AMOUNT\": {\n        \"PRECISION\": 18,\n        \"SCALE\": 4\n    },\n    \"ERROR_HANDLING\": {\n        \"includeCauseExtension\": false,\n        \"truncateExtensions\": true\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": true,\n        \"API\": {\n            \"DISABLED\": false\n        }\n    },\n    \"INSTRUMENTATION\": {\n        \"METRICS\": {\n            \"DISABLED\": false,\n            \"config\": {\n                \"timeout\": 5000,\n                \"prefix\": \"moja_\",\n                \"defaultLabels\": {\n                    \"serviceName\": \"ml-service\"\n                }\n            }\n        }\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            },\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"NOTIFICATION_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-notification-event\",\n                \"REGEX\": \"topic-notification-event\"\n            },\n            \"FULFIL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-transfer-fulfil\",\n                \"REGEX\": \"topic-transfer-fulfil\"\n            },\n            \"GET_TRANSFERS_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-transfer-get\",\n                \"REGEX\": \"topic-transfer-get\"\n            }\n        },\n        \"CONSUMER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 0,\n                            \"batchSize\": 100,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"consumeTimeout\": 50,\n                            \"consumeConcurrency\": 1,\n                            \"sync\": true\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"ml-con-notification-event\",\n                            \"group.id\": \"ml-group-notification-event\",\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"socket.keepalive.enable\": true\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"back-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"dr_cb\": false,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000\n                        },\n                        \"topicConf\": {\n                            \"request.required.acks\": \"all\",\n                            \"partitioner\": \"random\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"

---
# Source: mojaloop/charts/quoting-service/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-quoting-service-config
  labels:
    app.kubernetes.io/name: quoting-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0-snapshot
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: quoting-service-8.7.1
data:
  default.json: "\n{\n  \"HOSTNAME\": \"http://quoting-service.local\",\n  \"LISTEN_ADDRESS\": \"0.0.0.0\",\n  \"PORT\": 3002,\n  \"SWITCH_ENDPOINT\": \"http://perf1-quoting-service.mojaloop.live\",\n  \"AMOUNT\": {\n    \"PRECISION\": 18,\n    \"SCALE\": 4\n  },\n  \"ERROR_HANDLING\": {\n    \"includeCauseExtension\": false,\n    \"truncateExtensions\": true\n  },\n  \"DATABASE\": {\n    \"DIALECT\": \"mysql\",\n    \"HOST\": \"back-centralledger-mysql\",\n    \"PORT\": 3306,\n    \"USER\": \"central_ledger\",\n    \"PASSWORD\": \"oyMxgZChuu\",\n    \"SCHEMA\": \"central_ledger\",\n    \"POOL_MIN_SIZE\": 10,\n    \"POOL_MAX_SIZE\": 30,\n    \"ACQUIRE_TIMEOUT_MILLIS\": 30000,\n    \"CREATE_TIMEOUT_MILLIS\": 30000,\n    \"DESTROY_TIMEOUT_MILLIS\": 5000,\n    \"IDLE_TIMEOUT_MILLIS\": 30000,\n    \"REAP_INTERVAL_MILLIS\": 1000,\n    \"CREATE_RETRY_INTERVAL_MILLIS\": 200,\n    \"DEBUG\": false\n  },\n  \"SIMPLE_ROUTING_MODE\": false\n}\n"
  rules.json: "[]"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-quoting-service-sidecar
  labels:
    app.kubernetes.io/name: quoting-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0-snapshot
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: quoting-service-8.7.1
data:
  default.json: "{\n  \"PORT\": 4001,\n  \"EVENT_LOGGER_GRPC_HOST\": \"localhost\",\n  \"EVENT_LOGGER_GRPC_PORT\": 50051,\n  \"INSTRUMENTATION\": {\n    \"METRICS\": {\n      \"DISABLED\": false,\n      \"labels\": {\n        \"eventId\": \"*\"\n      },\n      \"config\": {\n        \"timeout\": 5000,\n        \"prefix\": \"moja_\",\n        \"defaultLabels\": {\n          \"serviceName\": \"quoting-service-event-sidecar\"\n        }\n      }\n    }\n  },\n  \"KAFKA\": {\n    \"TOPIC_TEMPLATES\": {\n      \"GENERAL_TOPIC_TEMPLATE\": {\n        \"TEMPLATE\": \"topic-{{functionality}}\",\n        \"REGEX\": \"topic-(.*)\"\n      }\n    },\n    \"PRODUCER\": {\n      \"EVENT\": {\n        \"config\": {\n          \"options\": {\n            \"messageCharset\": \"utf8\"\n          },\n          \"rdkafkaConf\": {\n            \"metadata.broker.list\": \"back-kafka:9092\",\n            \"client.id\": \"es-prod-event\",\n            \"event_cb\": true,\n            \"dr_cb\": true,\n            \"socket.keepalive.enable\": true,\n            \"queue.buffering.max.messages\": 10000000\n          },\n          \"topicConf\": {\n            \"request.required.acks\": \"all\"\n          }\n        }\n      }\n    }\n  }\n}\n"

---
# Source: mojaloop/charts/simulator/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: back-simulator-config
  labels:
    app.kubernetes.io/name: simulator
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.1
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: simulator-8.8.0
data:
  LOG_LEVEL: "info"
  PARTIES_ENDPOINT: http://back-account-lookup-service
  QUOTES_ENDPOINT: http://back-quoting-service
  TRANSFERS_ENDPOINT: http://back-ml-api-adapter-service
  TRANSFERS_FULFIL_RESPONSE_DISABLED: "false"
  TRANSFERS_FULFILMENT: "XoSz1cL0tljJSCp_VtIYmPNw-zFUgGfbUqf69AagUzY"
  TRANSFERS_CONDITION: "HOr22-H3AfTDHrSkPjJtVPRdKouuMkDXTR4ejlQa8Ks"
  TRANSFERS_ILPPACKET: "AQAAAAAAAADIEHByaXZhdGUucGF5ZWVmc3CCAiB7InRyYW5zYWN0aW9uSWQiOiIyZGY3NzRlMi1mMWRiLTRmZjctYTQ5NS0yZGRkMzdhZjdjMmMiLCJxdW90ZUlkIjoiMDNhNjA1NTAtNmYyZi00NTU2LThlMDQtMDcwM2UzOWI4N2ZmIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkxMyIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTExIiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnt9fX0sImFtb3VudCI6eyJjdXJyZW5jeSI6IlVTRCIsImFtb3VudCI6IjIwMCJ9LCJ0cmFuc2FjdGlvblR5cGUiOnsic2NlbmFyaW8iOiJERVBPU0lUIiwic3ViU2NlbmFyaW8iOiJERVBPU0lUIiwiaW5pdGlhdG9yIjoiUEFZRVIiLCJpbml0aWF0b3JUeXBlIjoiQ09OU1VNRVIiLCJyZWZ1bmRJbmZvIjp7fX19"
  MOCK_JWS_SIGNATURE: "abcJjvNrkyK2KBieDUbGfhaBUn75aDUATNF4joqA8OLs4QgSD7i6EO8BIdy6Crph3LnXnTM20Ai1Z6nt0zliS_qPPLU9_vi6qLb15FOkl64DQs9hnfoGeo2tcjZJ88gm19uLY_s27AJqC1GH1B8E2emLrwQMDMikwQcYvXoyLrL7LL3CjaLMKdzR7KTcQi1tCK4sNg0noIQLpV3eA61kess"
  METRICS_DISABLED: "false"
  METRICS_PREFIX: "moja_"
  METRICS_TIMEOUT: "5000"
  METRICS_SERVICENAME: simulator
  HTTP_KEEPALIVE: "true"
  HTTP_KEEPALIVEMS: "1000"
  HTTP_MAXSOCKETS: "20"
  HTTP_MAXFREESOCKETS: "20"
  HTTP_TIMEOUTMS: "1000"
  HTTP_HOST_PORT: "8999"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/rbac.yaml

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: back
  namespace: backend
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: back
  namespace: backend
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: back
roleRef:
  kind: Role
  name: back
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: back
  namespace: backend

---
# Source: mojaloop/charts/account-lookup-service/charts/account-lookup-service-admin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-account-lookup-service-admin
  labels:
    app.kubernetes.io/name: account-lookup-service-admin
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: account-lookup-service-admin-8.7.1
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-admin
      protocol: TCP
      name: http-admin
  selector:
    app.kubernetes.io/name: account-lookup-service-admin
    app.kubernetes.io/instance: back

---
# Source: mojaloop/charts/account-lookup-service/charts/account-lookup-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-account-lookup-service
  labels:
    app.kubernetes.io/name: account-lookup-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: account-lookup-service-8.7.1
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-api
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: account-lookup-service
    app.kubernetes.io/instance: back

---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/service-metrics.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: "back-account-lookup-mysql-metrics"
  labels:
    app: back-account-lookup-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 9104
  selector:
    app: back-account-lookup-mysql
    release: "back"


---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/service-percona.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-account-lookup-mysql
  labels:
    app: back-account-lookup-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
spec:
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: back-account-lookup-mysql
    release: "back"

---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/service-repl.yaml
apiVersion: v1
kind: Service
metadata:
  name: "back-account-lookup-mysql-repl"
  labels:
    app: back-account-lookup-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
spec:
  clusterIP: None
  ports:
  - name: galera
    port: 4567
  - name: state-xfer
    port: 4568
  - name: state-snap
    port: 4444
  selector:
    app: back-account-lookup-mysql
    release: "back"

---
# Source: mojaloop/charts/central/charts/centraleventprocessor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centraleventprocessor
  labels:
    app.kubernetes.io/name: centraleventprocessor
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centraleventprocessor-8.7.1
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: centraleventprocessor
    app.kubernetes.io/instance: back

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralledger-handler-admin-transfer
  labels:
    app.kubernetes.io/name: centralledger-handler-admin-transfer
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-admin-transfer-8.8.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: centralledger-handler-admin-transfer
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralledger-handler-timeout
  labels:
    app.kubernetes.io/name: centralledger-handler-timeout
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-timeout-8.8.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: centralledger-handler-timeout
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralledger-handler-transfer-fulfil
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-fulfil
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-fulfil-8.8.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: centralledger-handler-transfer-fulfil
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralledger-handler-transfer-get
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-get
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-get-8.8.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: centralledger-handler-transfer-get
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralledger-handler-transfer-position
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-position
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-position-8.8.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: centralledger-handler-transfer-position
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralledger-handler-transfer-prepare
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-prepare
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-prepare-8.8.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: centralledger-handler-transfer-prepare
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralledger-service
  labels:
    app.kubernetes.io/name: centralledger-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-service-8.8.0
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: centralledger-service
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-zookeeper-headless
  labels:
    app: zookeeper
    chart: zookeeper-1.2.0
    release: back
    heritage: Tiller
spec:
  clusterIP: None
  ports:
    - name: client
      port: 2181
      targetPort: 
      protocol: TCP
    - name: election
      port: 3888
      targetPort: 
      protocol: TCP
    - name: server
      port: 2888
      targetPort: 
      protocol: TCP
  selector:
    app: zookeeper
    release: back

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.2.0
    release: back
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: client
      
  selector:
    app: zookeeper
    release: back

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/service-brokers.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-kafka
  labels:
    app: kafka
    chart: kafka-0.13.11
    release: back
    heritage: Tiller
spec:
  ports:
  - name: broker
    port: 9092
    targetPort: kafka
  selector:
    app: kafka
    release: back
---

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-kafka-headless
  labels:
    app: kafka
    chart: kafka-0.13.11
    release: back
    heritage: Tiller
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: broker
    port: 9092
  clusterIP: None
  selector:
    app: kafka
    release: back

---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/service-metrics.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: "back-centralledger-mysql-metrics"
  labels:
    app: back-centralledger-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 9104
  selector:
    app: back-centralledger-mysql
    release: "back"


---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/service-percona.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralledger-mysql
  labels:
    app: back-centralledger-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
spec:
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: back-centralledger-mysql
    release: "back"

---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/service-repl.yaml
apiVersion: v1
kind: Service
metadata:
  name: "back-centralledger-mysql-repl"
  labels:
    app: back-centralledger-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
spec:
  clusterIP: None
  ports:
  - name: galera
    port: 4567
  - name: state-xfer
    port: 4568
  - name: state-snap
    port: 4444
  selector:
    app: back-centralledger-mysql
    release: "back"

---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-centralsettlement
  labels:
    app.kubernetes.io/name: centralsettlement
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.6.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralsettlement-8.7.1
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3007
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: centralsettlement
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/emailnotifier/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-emailnotifier
  labels:
    app.kubernetes.io/name: emailnotifier
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: emailnotifier-8.7.1
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3081
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: emailnotifier
    app.kubernetes.io/instance: back

---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-ml-api-adapter-handler-notification
  labels:
    app.kubernetes.io/name: ml-api-adapter-handler-notification
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: ml-api-adapter-handler-notification-8.8.0
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: 
  selector:
    app.kubernetes.io/name: ml-api-adapter-handler-notification
    app.kubernetes.io/instance: back

---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-ml-api-adapter-service
  labels:
    app.kubernetes.io/name: ml-api-adapter-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: ml-api-adapter-service-8.8.0
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: 
  selector:
    app.kubernetes.io/name: ml-api-adapter-service
    app.kubernetes.io/instance: back

---
# Source: mojaloop/charts/quoting-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-quoting-service
  labels:
    app.kubernetes.io/name: quoting-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0-snapshot
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: quoting-service-8.7.1
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3002
      protocol: TCP
      name: http-api
  selector:
    app.kubernetes.io/name: quoting-service
    app.kubernetes.io/instance: back
---
# Source: mojaloop/charts/simulator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: back-simulator
  labels:
    app.kubernetes.io/name: simulator
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.1
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: simulator-8.8.0
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: "http"
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: simulator
    app.kubernetes.io/instance: back

---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/tests/pxc-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "back-test"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: pxc-test
    image: "percona/percona-xtradb-cluster:5.7.19"
    imagePullPolicy: "Always"
    command: ["bash", "/tests/run.sh"]
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: back-account-lookup-mysql
          key: mysql-root-password
    volumeMounts:
    - mountPath: /tests
      name: tests
  volumes:
  - name: tests
    configMap:
      name: back-account-lookup-mysql-tests
  restartPolicy: Never

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/tests/test_topic_create_consume_produce.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "back-test-topic-create-consume-produce"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: back-test-consume
    image: confluentinc/cp-kafka:5.0.1
    command:
    - sh
    - -c
    - |
      # Create the topic
      kafka-topics --zookeeper back-zookeeper:2181 --topic helm-test-topic-create-consume-produce --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list back-kafka:9092 --topic helm-test-topic-create-consume-produce && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server back-kafka-headless:9092 --topic helm-test-topic-create-consume-produce --from-beginning --timeout-ms 2000 --max-messages 1 | grep "$MESSAGE"
  restartPolicy: Never

---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/tests/pxc-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "back-test"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: pxc-test
    image: "percona/percona-xtradb-cluster:5.7.19"
    imagePullPolicy: "Always"
    command: ["bash", "/tests/run.sh"]
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: back-centralledger-mysql
          key: mysql-root-password
    volumeMounts:
    - mountPath: /tests
      name: tests
  volumes:
  - name: tests
    configMap:
      name: back-centralledger-mysql-tests
  restartPolicy: Never

---
# Source: mojaloop/charts/account-lookup-service/charts/account-lookup-service-admin/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: back-account-lookup-service-admin
  labels:
    app.kubernetes.io/name: account-lookup-service-admin
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: account-lookup-service-admin-8.7.1
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: account-lookup-service-admin
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: account-lookup-service-admin
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.7.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: account-lookup-service-admin-8.7.1
    spec:
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until mysql -h back-account-lookup-mysql -P 3306 -u account_lookup --password=OdonPianoX  account_lookup   -e 'select version()' ; do echo waiting for MySQL; sleep 2; done;"
        - name: run-migration
          image: mojaloop/account-lookup-service:v8.7.0
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - npm run migrate
          volumeMounts:
            - name: back-account-lookup-service-admin-config-volume
              mountPath: /opt/account-lookup-service/config
      containers:
        - name: account-lookup-service-admin
          image: mojaloop/account-lookup-service:v8.7.0
          imagePullPolicy: Always
          command: ["node", "src/index.js", "server", "--admin"]
          env:
            - name: LOG_LEVEL
              value: info
            - name: CSL_LOG_TRANSPORT
              value: file
          ports:
            - name: http-admin
              containerPort: 4001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http-admin
          readinessProbe:
            httpGet:
              path: /health
              port: http-admin
          resources:
            {}
            
          volumeMounts:
          - name: back-account-lookup-service-admin-config-volume
            mountPath: /opt/account-lookup-service/config
      volumes:
        - name: back-account-lookup-service-admin-config-volume
          configMap:
            name: back-account-lookup-service-admin-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js

---
# Source: mojaloop/charts/account-lookup-service/charts/account-lookup-service/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: back-account-lookup-service
  labels:
    app.kubernetes.io/name: account-lookup-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: account-lookup-service-8.7.1
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: account-lookup-service
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: account-lookup-service
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.7.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: account-lookup-service-8.7.1
    spec:
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until mysql -h back-account-lookup-mysql -P 3306 -u account_lookup --password=OdonPianoX  account_lookup   -e 'select * from oracleEndpoint;' ; do echo waiting for MySQL; sleep 2; done;"
      containers:
        - name: account-lookup-service
          image: "mojaloop/account-lookup-service:v8.7.0"
          imagePullPolicy: Always
          command: ["node", "src/index.js", "server", "--api"]
          env:
            - name: LOG_LEVEL
              value: info
            - name: CSL_LOG_TRANSPORT
              value: file
          ports:
            - name: http-api
              containerPort: 4002
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http-api
          readinessProbe:
            httpGet:
              path: /health
              port: http-api
          resources:
            {}
            
          volumeMounts:
          - name: back-account-lookup-service-config-volume
            mountPath: /opt/account-lookup-service/config
      volumes:
        - name: back-account-lookup-service-config-volume
          configMap:
            name: back-account-lookup-service-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js

---
# Source: mojaloop/charts/central/charts/centraleventprocessor/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: back-centraleventprocessor
  labels:
    app.kubernetes.io/name: centraleventprocessor
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centraleventprocessor-8.7.1
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: centraleventprocessor
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centraleventprocessor
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.7.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centraleventprocessor-8.7.1
    spec:
      initContainers:
        - name: wait-for-mongodb
          image: bitnami/mongodb:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "mongo mongodb://back-cep-obj:27017 --eval \"db.adminCommand('ping')\""
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:

      containers:
        - name: centraleventprocessor
          image: "mojaloop/central-event-processor:v8.6.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 3080
          readinessProbe:
            httpGet:
              path: /health
              port: 3080
            initialDelaySeconds: 30
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3080
            initialDelaySeconds: 30
            periodSeconds: 15
          volumeMounts:
            - name: back-centraleventprocessor-config-volume
              mountPath: /opt/central-event-processor/config
          env:
            - name: LOG_LEVEL
              value: info
            - name: CSL_LOG_TRANSPORT
              value: file
      volumes:
        - name: back-centraleventprocessor-config-volume
          configMap:
            name: back-centraleventprocessor-config
            items:
              - key: default.json
                path: default.json

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-centralledger-handler-admin-transfer
  labels:
    app.kubernetes.io/name: centralledger-handler-admin-transfer
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-admin-transfer-8.8.0
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: centralledger-handler-admin-transfer
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centralledger-handler-admin-transfer
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centralledger-handler-admin-transfer-8.8.0
    spec:
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until result=$(mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-admin-transfer
          image: "mojaloop/central-ledger:v9.5.1-snapshot"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--admin"]
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          env:
            - name: LOG_LEVEL
              value: "error"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: ""
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
          volumeMounts:
          - name: back-centralledger-handler-admin-transfer-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: back-centralledger-handler-admin-transfer-config-volume
          configMap:
            name: back-centralledger-handler-admin-transfer-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-centralledger-handler-timeout
  labels:
    app.kubernetes.io/name: centralledger-handler-timeout
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-timeout-8.8.0
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: centralledger-handler-timeout
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centralledger-handler-timeout
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centralledger-handler-timeout-8.8.0
    spec:
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until result=$(mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-timeout
          image: "mojaloop/central-ledger:v9.5.1-snapshot"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--timeout"]
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          env:
            - name: LOG_LEVEL
              value: "error"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: ""
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
          volumeMounts:
          - name: back-centralledger-handler-timeout-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: back-centralledger-handler-timeout-config-volume
          configMap:
            name: back-centralledger-handler-timeout-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-centralledger-handler-transfer-fulfil
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-fulfil
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-fulfil-8.8.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: centralledger-handler-transfer-fulfil
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centralledger-handler-transfer-fulfil
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centralledger-handler-transfer-fulfil-8.8.0
      annotations:
        prometheus.io/port: "3001"
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_fulfil
        
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: ml_cl_fulfil
        
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until result=$(mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-transfer-fulfil
          image: "mojaloop/central-ledger-perf:v10.2.8-perf1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--fulfilPosition"]
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          env:
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: "audit:*"
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
            - name: FULFIL_DUPLICATE_INSERT_MODE
              value: "INSERT_ONLY"
            - name: RAW_FULFILPOSITION
              value: "true"
            - name: KAFKA_CONCURRENCY
              value: "1"
            - name: KAFKA_BATCH_COUNT
              value: "100"
            - name: KAFKA_BATCH_TIMEOUT
              value: "50"
            - name: ASYNC_CHAINED_MODE
              value: "true"
            - name: UV_THREADPOOL_SIZE
              value: "12"
              
          volumeMounts:
          - name: back-centralledger-handler-transfer-fulfil-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: back-centralledger-handler-transfer-fulfil-config-volume
          configMap:
            name: back-centralledger-handler-transfer-fulfil-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-centralledger-handler-transfer-get
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-get
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-get-8.8.0
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: centralledger-handler-transfer-get
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centralledger-handler-transfer-get
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centralledger-handler-transfer-get-8.8.0
    spec:
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until result=$(mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-transfer-get
          image: "mojaloop/central-ledger:v9.5.1-snapshot"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--get"]
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          env:
            - name: LOG_LEVEL
              value: "error"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: ""
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
          volumeMounts:
          - name: back-centralledger-handler-transfer-get-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: back-centralledger-handler-transfer-get-config-volume
          configMap:
            name: back-centralledger-handler-transfer-get-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-centralledger-handler-transfer-position
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-position
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-position-8.8.0
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: centralledger-handler-transfer-position
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centralledger-handler-transfer-position
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centralledger-handler-transfer-position-8.8.0
      annotations:
        prometheus.io/port: "3001"
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_position
        
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: ml_cl_position
        
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until result=$(mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-transfer-position
          image: "mojaloop/central-ledger-perf:v10.2.8-perf1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--position"]
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 15
          env:
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: "audit:*"
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
          volumeMounts:
          - name: back-centralledger-handler-transfer-position-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: back-centralledger-handler-transfer-position-config-volume
          configMap:
            name: back-centralledger-handler-transfer-position-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-centralledger-handler-transfer-prepare
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-prepare
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-prepare-8.8.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: centralledger-handler-transfer-prepare
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centralledger-handler-transfer-prepare
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centralledger-handler-transfer-prepare-8.8.0
      annotations:
        prometheus.io/port: "3001"
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_cl_prepare
        
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: ml_cl_prepare
        
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until result=$(mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-transfer-prepare
          image: "mojaloop/central-ledger-perf:v10.2.8-perf1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--preparePosition"]
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          env:
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: "audit:*"
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
            - name: PREPARE_DUPLICATE_INSERT_MODE
              value: "INSERT_ONLY"
            - name: KAFKA_CONCURRENCY
              value: "1"
            - name: KAFKA_BATCH_COUNT
              value: "100"
            - name: KAFKA_BATCH_TIMEOUT
              value: "50"
            - name: ASYNC_CHAINED_MODE
              value: "true"
            - name: UV_THREADPOOL_SIZE
              value: "12"
              
          volumeMounts:
          - name: back-centralledger-handler-transfer-prepare-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: back-centralledger-handler-transfer-prepare-config-volume
          configMap:
            name: back-centralledger-handler-transfer-prepare-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-centralledger-service
  labels:
    app.kubernetes.io/name: centralledger-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-service-8.8.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: centralledger-service
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centralledger-service
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centralledger-service-8.8.0
      annotations:
        prometheus.io/port: "3001"
        prometheus.io/scrape: "true"
    spec:
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger   -e 'select version()' ; do echo waiting for MySQL; sleep 2; done;"
        - name: run-migration
          image: mojaloop/central-ledger-perf:v10.2.8-perf1
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - npm run migrate
          env:
            - name: "CLEDG_MIGRATIONS__RUN_DATA_MIGRATIONS"
              value: "true"
          volumeMounts:
            - name: back-centralledger-service-config-volume
              mountPath: /opt/central-ledger/config
      containers:
        - name: centralledger-service
          image: mojaloop/central-ledger-perf:v10.2.8-perf1
          imagePullPolicy: Always
          command: ["node", "src/api/index.js"]
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3001
            initialDelaySeconds: 60
            periodSeconds: 15
          env:
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: "audit:*"
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
          volumeMounts:
          - name: back-centralledger-service-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: back-centralledger-service-config-volume
          configMap:
            name: back-centralledger-service-config
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/deployment-kafka-exporter.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: back-kafka-exporter
  labels:
    app: "kafka"
    release: back
    heritage: Tiller
    chart: "kafka-0.13.11"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-exporter
      release: back
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9308"
      labels:
        app: kafka-exporter
        release: back
    spec:
      containers:
      - image: "danielqsj/kafka-exporter:v1.0.1"
        name: kafka-exporter
        args:
          - --kafka.server=back-kafka:9092
          - --web.listen-address=:9308
        ports:
          - containerPort: 9308
        resources:
          {}
          
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: broker
        
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - broker
        

---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: back-centralsettlement
  labels:
    app.kubernetes.io/name: centralsettlement
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.6.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralsettlement-8.7.1
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: centralsettlement
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centralsettlement
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.6.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: centralsettlement-8.7.1
    spec:
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until result=$(mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
      containers:
        - name: centralsettlement
          image: "mojaloop/central-settlement:v8.6.0"
          imagePullPolicy: Always
          ports:
            - name: http-api
              containerPort: 3007
          env: 
            - name: LOG_LEVEL
              value: info
            - name: CSL_LOG_TRANSPORT
              value: file
          volumeMounts:
          - name: back-centralsettlement-config-volume
            mountPath: /opt/central-settlement/config
      volumes:
        - name: back-centralsettlement-config-volume
          configMap:
            name: back-centralsettlement-config
            items:
            - key: default.json
              path: default.json
#            - key: knexfile.js
#              path: knexfile.js

---
# Source: mojaloop/charts/emailnotifier/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: back-emailnotifier
  labels:
    app.kubernetes.io/name: emailnotifier
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: emailnotifier-8.7.1
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: emailnotifier
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: emailnotifier
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.7.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: emailnotifier-8.7.1
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:

      containers:
        - name: emailnotifier
          image: "mojaloop/email-notifier:v8.7.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 3081
          readinessProbe:
            httpGet:
              path: /health
              port: 3081
            initialDelaySeconds: 30
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3081
            initialDelaySeconds: 30
            periodSeconds: 15
          volumeMounts:
            - name: back-emailnotifier-config-volume
              mountPath: /opt/email-notifier/config
          env:
            - name: LOG_LEVEL
              value: info
            - name: CSL_LOG_TRANSPORT
              value: file
      volumes:
        - name: back-emailnotifier-config-volume
          configMap:
            name: back-emailnotifier-config
            items:
              - key: default.json
                path: default.json

---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-ml-api-adapter-handler-notification
  labels:
    app.kubernetes.io/name: ml-api-adapter-handler-notification
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: ml-api-adapter-handler-notification-8.8.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ml-api-adapter-handler-notification
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ml-api-adapter-handler-notification
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: ml-api-adapter-handler-notification-8.8.0
      annotations:
        prometheus.io/port: "3000"
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_notify
        
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: ml_notify
        
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      dnsConfig:
        options:
        - name: attempts
          value: "4"
      dnsPolicy: ClusterFirst
      containers:
        - name: ml-api-adapter-handler-notification
          image: "mojaloop/ml-api-adapter-perf:v10.2.7-perf1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--notification"]
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health?simple
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          volumeMounts:
            - name: back-ml-api-adapter-handler-notification-config-volume
              mountPath: /opt/ml-api-adapter/config
          env:
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: ""
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: 
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
            - name: KAFKA_CONCURRENCY
              value: "1"
            - name: KAFKA_BATCH_COUNT
              value: "100"
            - name: KAFKA_BATCH_TIMEOUT
              value: "50"
            - name: ASYNC_CHAINED_MODE
              value: "true"
            - name: UV_THREADPOOL_SIZE
              value: "12"
      volumes:
        - name: back-ml-api-adapter-handler-notification-config-volume
          configMap:
            name: back-ml-api-adapter-handler-notification-config
            items:
              - key: default.json
                path: default.json

---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-ml-api-adapter-service
  labels:
    app.kubernetes.io/name: ml-api-adapter-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: ml-api-adapter-service-8.8.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ml-api-adapter-service
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ml-api-adapter-service
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.8.0
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: ml-api-adapter-service-8.8.0
      annotations:
        prometheus.io/port: "3000"
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_api
        
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: ml_api
        
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server back-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: ml-api-adapter-service
          image: "mojaloop/ml-api-adapter-perf:v10.2.7-perf1"
          imagePullPolicy: Always
          command: ["node", "src/api/index.js"]
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health?simple
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health?simple
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          volumeMounts:
            - name: back-ml-api-adapter-service-config-volume
              mountPath: /opt/ml-api-adapter/config
          env:
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FILTER
              value: "error, warn, info"
            - name: CSL_LOG_TRANSPORT
              value: "file"
            - name: EVENT_SDK_LOG_FILTER
              value: "audit:*"
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: "log,trace"
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
      volumes:
        - name: back-ml-api-adapter-service-config-volume
          configMap:
            name: back-ml-api-adapter-service-config
            items:
            - key: default.json
              path: default.json

---
# Source: mojaloop/charts/quoting-service/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: back-quoting-service
  labels:
    app.kubernetes.io/name: quoting-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0-snapshot
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: quoting-service-8.7.1
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: quoting-service
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: quoting-service
        app.kubernetes.io/instance: back
        app.kubernetes.io/version: 8.7.0-snapshot
        app.kubernetes.io/managed-by: Tiller
        helm.sh/chart: quoting-service-8.7.1
    spec:
      initContainers:
        - name: wait-for-mysql
          image: mysql:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until result=$(mysql -h back-centralledger-mysql -P 3306 -u central_ledger --password=oyMxgZChuu  central_ledger -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
      containers:
        - name: quoting-service
          image: "mojaloop/quoting-service:v8.7.0-snapshot"
          imagePullPolicy: Always
          ports:
            - name: http-api
              containerPort: 3002
          env: 
            - name: LOG_LEVEL
              value: info
            - name: CSL_LOG_TRANSPORT
              value: file
            - name: EVENT_SDK_SIDECAR_DISABLED
              value: "false"
            - name: EVENT_SDK_SIDECAR_WITH_LOGGER
              value: 
            - name: EVENT_SDK_SERVER_HOST
              value: "localhost"
            - name: EVENT_SDK_SERVER_PORT
              value: "50051"
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "true"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: log,trace
          volumeMounts:
          - name: back-quoting-service-config-volume
            mountPath: /opt/quoting-service/config
        - name: quoting-service-sidecar
          image: "mojaloop/event-sidecar:v8.7.1"
          imagePullPolicy: Always
          command: ["npm", "run", "start"]
          ports:
            - containerPort: 4001
          readinessProbe:
            httpGet:
              path: /health
              port: 4001
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 4001
            initialDelaySeconds: 90
            periodSeconds: 15
          volumeMounts:
            - name: back-quoting-service-sidecar-volume
              mountPath: /opt/event-sidecar/config
          env:
            - name: LOG_LEVEL
              value: info
      volumes:
        - name: back-quoting-service-config-volume
          configMap:
            name: back-quoting-service-config
            items:
            - key: default.json
              path: default.json
#            - key: knexfile.js
#              path: knexfile.js
            - key: rules.json
              path: rules.json
        - name: back-quoting-service-sidecar-volume
          configMap:
            name: back-quoting-service-sidecar
            items:
            - key: default.json
              path: default.json

---
# Source: mojaloop/charts/simulator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-simulator
  labels:
    app.kubernetes.io/name: simulator
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.1
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: simulator-8.8.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: simulator
      app.kubernetes.io/instance: back
  template:
    metadata:
      labels:
        app.kubernetes.io/name: simulator
        app.kubernetes.io/instance: back
      annotations:
        checksum/config: 565c36545ba1464ab0b15955edec314f98f19a97f08eecc9aea732faabd86c21
        prometheus.io/port: "8444"
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - ml_sim
        
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: ml_sim
        
      containers:
        - name: simulator
          image: "mojaloop/simulator-perf:m9.2.1-perf4.1.2"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8444
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: 8444
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 8444
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
          env:
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: LOG_LEVEL
            - name: PARTIES_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: PARTIES_ENDPOINT
            - name: QUOTES_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: QUOTES_ENDPOINT
            - name: TRANSFERS_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: TRANSFERS_ENDPOINT
            - name: TRANSFERS_FULFIL_RESPONSE_DISABLED
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: TRANSFERS_FULFIL_RESPONSE_DISABLED
            - name: TRANSFERS_FULFILMENT
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: TRANSFERS_FULFILMENT
            - name: TRANSFERS_CONDITION
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: TRANSFERS_CONDITION
            - name: TRANSFERS_ILPPACKET
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: TRANSFERS_ILPPACKET
            - name: MOCK_JWS_SIGNATURE
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: MOCK_JWS_SIGNATURE
            - name: METRICS_DISABLED
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: METRICS_DISABLED
            - name: METRICS_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: METRICS_PREFIX
            - name: METRICS_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: METRICS_TIMEOUT
            - name: METRICS_SERVICENAME
              valueFrom:
                configMapKeyRef:
                  name: back-simulator-config
                  key: METRICS_SERVICENAME
            - name: EVENT_SDK_VENDOR_PREFIX
              value: "mojaloop"
            - name: EVENT_SDK_TRACESTATE_HEADER_ENABLED
              value: "false"
            - name: EVENT_SDK_ASYNC_OVERRIDE_EVENTS
              value: log,trace
            - name: EVENT_SDK_TRACEID_PER_VENDOR
              value: "false"
            - name: EVENT_SDK_LOG_FILTER
              value: ""

---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: back-account-lookup-mysql
  labels:
    app: back-account-lookup-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
spec:
  replicas: 0
  selector:
    matchLabels:
      app: back-account-lookup-mysql
      release: "back"
  serviceName: back-account-lookup-mysql
  template:
    metadata:
      labels:
        app: back-account-lookup-mysql
        chart: "mysql-1.0.1"
        release: "back"
        heritage: "Tiller"
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.25.0"
        imagePullPolicy: IfNotPresent
        command:
        - "rm"
        - "-fr"
        - "/var/lib/mysql/lost+found"
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      containers:
      - name: database
        image: "percona/percona-xtradb-cluster:5.7.19"
        imagePullPolicy: "Always"
        command:
        - "/bin/bash"
        - "/startup-scripts/entrypoint.sh"
        resources:
          null
          
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: back-account-lookup-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: back-account-lookup-mysql
              key: mysql-password
        - name: XTRABACKUP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: back-account-lookup-mysql
              key: xtrabackup-password
        - name: MYSQL_USER
          value: "account_lookup"
        - name: MYSQL_DATABASE
          value: "account_lookup"
        - name: ALLOW_ROOT_FROM
          value: "%"
        - name: CLUSTER_NAME
          value: back-account-lookup-mysql
        - name: SHORT_CLUSTER_NAME
          value: back-account-lookup-mysql
        - name: K8S_SERVICE_NAME
          value: back-account-lookup-mysql-repl
        - name: PXC_STRICT_MODE
          value: "ENFORCING"
        - name: DEBUG
          value: "true"
        ports:
        - name: mysql
          containerPort: 3306
        - name: galera-repl
          containerPort: 4567
        - name: state-transfer
          containerPort: 4568
        - name: state-snapshot
          containerPort: 4444
        livenessProbe:
          exec:
            command:
              - "/bin/bash"
              - "-c"
              - "mysqladmin ping || test -e /var/lib/mysql/sst_in_progress"
          initialDelaySeconds: 30
          timeoutSeconds: 2
        readinessProbe:
          exec:
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-startup-scripts
          mountPath: /startup-scripts
        - name: mysql-config-files
          mountPath: /etc/mysql/conf.d
        - name: slash-root
          mountPath: /root
        - name: var-log
          mountPath: /var/log
      
      - name: "logs"
        image: "busybox:1.25.0"
        imagePullPolicy: IfNotPresent
        command:
        - "tail"
        - "-f"
        - "/var/log/mysqld.log"
        volumeMounts:
        - name: var-log
          mountPath: /var/log
      
      
      - name: metrics
        image: prom/mysqld-exporter:v0.11.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9104
        volumeMounts:
        - name: slash-root
          mountPath: /root
        livenessProbe:
          exec:
            command: ["wget","-q","-O","-","localhost:9104"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        readinessProbe:
          exec:
            command: ["wget","-q","-O","-","localhost:9104"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
      
      volumes:
      - name: slash-root
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      - name: mysql-config-files
        configMap:
          name: back-account-lookup-mysql-config-files
      - name: mysql-startup-scripts
        configMap:
          name: back-account-lookup-mysql-startup-scripts
      - name: mysql-data
        emptyDir: {}
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: data
        
      nodeSelector:
        node-role.mojaloop.io: data
        
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: back-zookeeper
  labels:
    app: zookeeper
    chart: zookeeper-1.2.0
    release: back
    heritage: Tiller
    component: server
spec:
  serviceName: back-zookeeper-headless
  replicas: 3
  selector:
    matchLabels:
      app: zookeeper
      release: back
      component: server
  updateStrategy:
    type: OnDelete
    
  template:
    metadata:
      labels:
        app: zookeeper
        release: back
        component: server
      annotations:
    spec:
      terminationGracePeriodSeconds: 1800
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        
      containers:

        - name: zookeeper
          image: "gcr.io/google_samples/k8szk:v3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -xec
            - zkGenConfig.sh && exec zkServer.sh start-foreground
          ports:
            - name: client
              containerPort: 2181
              protocol: TCP
              
            - name: election
              containerPort: 3888
              protocol: TCP
              
            - name: server
              containerPort: 2888
              protocol: TCP
              
          livenessProbe:
            exec:
              command:
              - zkOk.sh
            initialDelaySeconds: 20
            
          readinessProbe:
            exec:
              command:
              - zkOk.sh
            initialDelaySeconds: 20
            
          env:
            - name: ZK_REPLICAS
              value: "3"
            - name: JMXAUTH
              value: "false"
            - name: JMXDISABLE
              value: "false"
            - name: JMXPORT
              value: "1099"
            - name: JMXSSL
              value: "false"
            - name: ZK_CLIENT_PORT
              value: "2181"
            - name: ZK_ELECTION_PORT
              value: "3888"
            - name: ZK_HEAP_SIZE
              value: "1G"
            - name: ZK_INIT_LIMIT
              value: "5"
            - name: ZK_LOG_LEVEL
              value: "INFO"
            - name: ZK_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZK_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZK_MIN_SESSION_TIMEOUT
              value: "4000"
            - name: ZK_PURGE_INTERVAL
              value: "0"
            - name: ZK_SERVER_PORT
              value: "2888"
            - name: ZK_SNAP_RETAIN_COUNT
              value: "3"
            - name: ZK_SYNC_LIMIT
              value: "10"
            - name: ZK_TICK_TIME
              value: "2000"
          resources:
            {}
            
          volumeMounts:
            - name: data
              mountPath: /var/lib/zookeeper
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - broker
        
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: broker
        
      volumes:
        - name: data
          emptyDir: {}

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/statefulset.yaml

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: back-kafka
  labels:
    app: kafka
    chart: kafka-0.13.11
    release: back
    heritage: Tiller
spec:
  serviceName: back-kafka-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: OnDelete
    
  replicas: 5
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
      labels:
        app: kafka
        release: back
    spec:
      serviceAccountName: back
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: broker
        
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.mojaloop.io
                operator: In
                values:
                - broker
        
      containers:
      - name: metrics
        image: "solsson/kafka-prometheus-jmx-exporter@sha256:a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8"
        command:
        - sh
        - -exc
        - |
          trap "exit 0" TERM; \
          while :; do \
          java \
          -XX:+UnlockExperimentalVMOptions \
          -XX:+UseCGroupMemoryLimitForHeap \
          -XX:MaxRAMFraction=1 \
          -XshowSettings:vm \
          -jar \
          jmx_prometheus_httpserver.jar \
          "5556" \
          /etc/jmx-kafka/jmx-kafka-prometheus.yml & \
          wait $! || sleep 3; \
          done
        ports:
        - containerPort: 5556
          name: prometheus
        resources:
          {}
          
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka
      - name: kafka-broker
        image: "confluentinc/cp-kafka:5.0.1"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          exec:
            command:
              - sh
              - -ec
              - /usr/bin/jps | /bin/grep -q SupportedKafka
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 5555
          name: jmx
        resources:
          {}
          
        env:
        - name: JMX_PORT
          value: "5555"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: -Xmx1G -Xms1G
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "back-zookeeper:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data/logs"
        - name: "KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE"
          value: "false"
        - name: "KAFKA_DEFAULT_REPLICATION_FACTOR"
          value: "1"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "1"
        - name: KAFKA_JMX_PORT
          value: "5555"
        - name: "KAFKA_LOG4J_LOGGERS"
          value: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        - name: "KAFKA_LOG4J_ROOT_LOGLEVEL"
          value: "INFO"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          unset KAFKA_PORT && \
          export KAFKA_BROKER_ID=${POD_NAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.back-kafka-headless.${POD_NAMESPACE}:9092 && \
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: "/opt/kafka/data"
      volumes:
      - name: datadir
        emptyDir: {}
      - name: jmx-config
        configMap:
          name: back-kafka-metrics
      terminationGracePeriodSeconds: 60

---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: back-centralledger-mysql
  labels:
    app: back-centralledger-mysql
    chart: "mysql-1.0.1"
    release: "back"
    heritage: "Tiller"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: back-centralledger-mysql
      release: "back"
  serviceName: back-centralledger-mysql
  template:
    metadata:
      labels:
        app: back-centralledger-mysql
        chart: "mysql-1.0.1"
        release: "back"
        heritage: "Tiller"
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.25.0"
        imagePullPolicy: IfNotPresent
        command:
        - "rm"
        - "-fr"
        - "/var/lib/mysql/lost+found"
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      containers:
      - name: database
        image: "percona/percona-xtradb-cluster:5.7.19"
        imagePullPolicy: "Always"
        command:
        - "/bin/bash"
        - "/startup-scripts/entrypoint.sh"
        resources:
          null
          
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: back-centralledger-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: back-centralledger-mysql
              key: mysql-password
        - name: XTRABACKUP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: back-centralledger-mysql
              key: xtrabackup-password
        - name: MYSQL_USER
          value: "central_ledger"
        - name: MYSQL_DATABASE
          value: "central_ledger"
        - name: ALLOW_ROOT_FROM
          value: "%"
        - name: CLUSTER_NAME
          value: back-centralledger-mysql
        - name: SHORT_CLUSTER_NAME
          value: back-centralledger-mysql
        - name: K8S_SERVICE_NAME
          value: back-centralledger-mysql-repl
        - name: PXC_STRICT_MODE
          value: "ENFORCING"
        - name: DEBUG
          value: "true"
        ports:
        - name: mysql
          containerPort: 3306
        - name: galera-repl
          containerPort: 4567
        - name: state-transfer
          containerPort: 4568
        - name: state-snapshot
          containerPort: 4444
        livenessProbe:
          exec:
            command:
              - "/bin/bash"
              - "-c"
              - "mysqladmin ping || test -e /var/lib/mysql/sst_in_progress"
          initialDelaySeconds: 30
          timeoutSeconds: 2
        readinessProbe:
          exec:
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-startup-scripts
          mountPath: /startup-scripts
        - name: mysql-config-files
          mountPath: /etc/mysql/conf.d
        - name: slash-root
          mountPath: /root
        - name: var-log
          mountPath: /var/log
      
      - name: "logs"
        image: "busybox:1.25.0"
        imagePullPolicy: IfNotPresent
        command:
        - "tail"
        - "-f"
        - "/var/log/mysqld.log"
        volumeMounts:
        - name: var-log
          mountPath: /var/log
      
      
      - name: metrics
        image: prom/mysqld-exporter:v0.11.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9104
        volumeMounts:
        - name: slash-root
          mountPath: /root
        livenessProbe:
          exec:
            command: ["wget","-q","-O","-","localhost:9104"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        readinessProbe:
          exec:
            command: ["wget","-q","-O","-","localhost:9104"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
      
      volumes:
      - name: slash-root
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      - name: mysql-config-files
        configMap:
          name: back-centralledger-mysql-config-files
      - name: mysql-startup-scripts
        configMap:
          name: back-centralledger-mysql-startup-scripts
      - name: mysql-data
        emptyDir: {}
      tolerations:
        - effect: NoSchedule
          key: node-role.mojaloop.io
          operator: Equal
          value: data
        
      nodeSelector:
        node-role.mojaloop.io: data
        
---
# Source: mojaloop/charts/account-lookup-service/charts/account-lookup-service-admin/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-account-lookup-service-admin
  labels:
    app.kubernetes.io/name: account-lookup-service-admin
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: account-lookup-service-admin-8.7.1
spec:
  rules:
    - host: "perf1-account-lookup-admin.mojaloop.live"
      http:
        paths:
          - path: /
            backend:
              serviceName: back-account-lookup-service-admin
              servicePort: http-admin

---
# Source: mojaloop/charts/account-lookup-service/charts/account-lookup-service/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-account-lookup-service
  labels:
    app.kubernetes.io/name: account-lookup-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: account-lookup-service-8.7.1
spec:
  rules:
    - host: "perf1-account-lookup.mojaloop.live"
      http:
        paths:
          - path: /
            backend:
              serviceName: back-account-lookup-service
              servicePort: http-api

---
# Source: mojaloop/charts/central/charts/centraleventprocessor/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centraleventprocessor
  labels:
    app.kubernetes.io/name: centraleventprocessor
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centraleventprocessor-8.7.1
spec:
  rules:
    - host: "central-event-processor.local"
      http:
        paths:
          - path: 
            backend:
              serviceName: back-centraleventprocessor
              servicePort: http

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centralledger-handler-admin-transfer
  labels:
    app.kubernetes.io/name: centralledger-handler-admin-transfer
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-admin-transfer-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-admin-transfer.local
      http:
        paths:
          - path: /
            backend:
              serviceName: back-centralledger-handler-admin-transfer
              servicePort: 80
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centralledger-handler-timeout
  labels:
    app.kubernetes.io/name: centralledger-handler-timeout
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-timeout-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-timeout.local
      http:
        paths:
          - path: /
            backend:
              serviceName: back-centralledger-handler-timeout
              servicePort: 80
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centralledger-handler-transfer-fulfil
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-fulfil
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-fulfil-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-transfer-fulfil.local
      http:
        paths:
          - path: /
            backend:
              serviceName: back-centralledger-handler-transfer-fulfil
              servicePort: 80
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centralledger-handler-transfer-get
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-get
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-get-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-transfer-get.local
      http:
        paths:
          - path: /
            backend:
              serviceName: back-centralledger-handler-transfer-get
              servicePort: 80
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centralledger-handler-transfer-position
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-position
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-position-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-transfer-position.local
      http:
        paths:
          - path: /
            backend:
              serviceName: back-centralledger-handler-transfer-position
              servicePort: 80
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centralledger-handler-transfer-prepare
  labels:
    app.kubernetes.io/name: centralledger-handler-transfer-prepare
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-handler-transfer-prepare-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-transfer-prepare.local
      http:
        paths:
          - path: /
            backend:
              serviceName: back-centralledger-handler-transfer-prepare
              servicePort: 80
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centralledger-service
  labels:
    app.kubernetes.io/name: centralledger-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralledger-service-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: perf1-central-ledger.mojaloop.live
      http:
        paths:
          - path: /
            backend:
              serviceName: back-centralledger-service
              servicePort: 80
---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-centralsettlement
  labels:
    app.kubernetes.io/name: centralsettlement
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.6.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: centralsettlement-8.7.1
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: perf1-central-settlement.mojaloop.live
      http:
        paths:
          - path: /
            backend:
              serviceName: back-centralsettlement
              servicePort: 80
---
# Source: mojaloop/charts/emailnotifier/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-emailnotifier
  labels:
    app.kubernetes.io/name: emailnotifier
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: emailnotifier-8.7.1
spec:
  rules:
    - host: "email-notifier.local"
      http:
        paths:
          - path: 
            backend:
              serviceName: back-emailnotifier
              servicePort: http

---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-ml-api-adapter-handler-notification
  labels:
    app.kubernetes.io/name: ml-api-adapter-handler-notification
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: ml-api-adapter-handler-notification-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: ml-api-adapter.local
      http:
        paths:
          - path: /
            backend:
              serviceName: back-ml-api-adapter-handler-notification
              servicePort: 80
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-ml-api-adapter-service
  labels:
    app.kubernetes.io/name: ml-api-adapter-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.8.0
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: ml-api-adapter-service-8.8.0
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: perf1-ml-api-adapter.mojaloop.live
      http:
        paths:
          - path: /
            backend:
              serviceName: back-ml-api-adapter-service
              servicePort: 80
---
# Source: mojaloop/charts/quoting-service/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-quoting-service
  labels:
    app.kubernetes.io/name: quoting-service
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.0-snapshot
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: quoting-service-8.7.1
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: perf1-quoting-service.mojaloop.live
      http:
        paths:
          - path: /
            backend:
              serviceName: back-quoting-service
              servicePort: 80
---
# Source: mojaloop/charts/simulator/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: back-simulator
  labels:
    app.kubernetes.io/name: simulator
    app.kubernetes.io/instance: back
    app.kubernetes.io/version: 8.7.1
    app.kubernetes.io/managed-by: Tiller
    helm.sh/chart: simulator-8.8.0
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    
spec:
  rules:
    - host: perf1-simulator.mojaloop.live
      http:
        paths:
          - path: /
            backend:
              serviceName: back-simulator
              servicePort: http

---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/pdb.yaml


---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/prometheusrule.yaml


---
# Source: mojaloop/charts/account-lookup-service/charts/mysql/templates/servicemonitor.yaml


---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/endpoint.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/endpoint.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/endpoint.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/endpoint.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/endpoint.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/endpoint.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/endpoint.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/config-jmx-exporter.yaml


---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/job-chroots.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/configmap-config.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/job-config.yaml

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/service-brokers-external.yaml


---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/servicemonitors.yaml

---


---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/pdb.yaml


---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/prometheusrule.yaml


---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/servicemonitor.yaml


---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/endpoint.yaml

---
# Source: mojaloop/charts/quoting-service/templates/endpoint.yaml

